defmodule Scholar.Manifold.MDSTest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.MDS
  doctest MDS

  def x() do
    Nx.iota({10, 50})
  end

  def key() do
    Nx.Random.key(42)
  end

  test "non-default num_components" do
    key = key()
    x = x()
    model = EXLA.jit_apply(&MDS.fit(&1, num_components: 5, key: &2), [x, key])

    assert_all_close(
      model.embedding,
      Nx.tensor([
        [
          57.28269577026367,
          -678.6760864257812,
          811.1503295898438,
          -251.1714324951172,
          1156.7987060546875
        ],
        [
          7.623606204986572,
          -544.2373046875,
          604.0946655273438,
          -225.99559020996094,
          903.2800903320312
        ],
        [
          -7.334737300872803,
          -429.81671142578125,
          402.1512145996094,
          -163.3682861328125,
          639.9016723632812
        ],
        [
          13.86670207977295,
          -296.5096435546875,
          223.15061950683594,
          -84.07274627685547,
          374.4827575683594
        ],
        [
          38.73623275756836,
          -134.54620361328125,
          50.4241943359375,
          -38.010799407958984,
          113.90003967285156
        ],
        [
          18.940887451171875,
          30.962879180908203,
          -127.7795639038086,
          45.001678466796875,
          -131.29234313964844
        ],
        [
          18.05344581604004,
          222.0098114013672,
          -292.34197998046875,
          86.87554168701172,
          -378.58544921875
        ],
        [
          -3.060556173324585,
          429.6268005371094,
          -436.2151794433594,
          146.84103393554688,
          -621.5556640625
        ],
        [
          -55.395423889160156,
          613.6642456054688,
          -565.1470947265625,
          225.3615264892578,
          -882.4739379882812
        ],
        [
          -88.7128677368164,
          787.5221557617188,
          -669.4872436523438,
          258.53912353515625,
          -1174.455810546875
        ]
      ])
    )

    assert_all_close(model.stress, 698.4426879882812)
    assert_all_close(model.n_iter, Nx.tensor(152))
  end

  test "non-default metric" do
    key = key()
    x = x()
    model = EXLA.jit_apply(&MDS.fit(&1, metric: false, key: &2), [x, key])

    assert_all_close(
      model.embedding,
      Nx.tensor([
        [-0.23465712368488312, 0.6921732425689697],
        [-0.3380763530731201, 0.4378605782985687],
        [-0.15237200260162354, 0.26230522990226746],
        [0.09990488737821579, 0.2603200674057007],
        [0.15598554909229279, 0.03315458819270134],
        [0.41043558716773987, 0.13559512794017792],
        [0.24686546623706818, -0.24366283416748047],
        [0.1395486444234848, -0.4151153564453125],
        [-0.07875102013349533, -0.530768096446991],
        [-0.21976199746131897, -0.6417303681373596]
      ])
    )

    assert_all_close(model.stress, 0.1966342180967331)
    assert_all_close(model.n_iter, Nx.tensor(38))
  end

  test "option normalized_stress with metric set to false" do
    key = key()
    x = x()

    model =
      EXLA.jit_apply(&MDS.fit(&1, metric: false, key: &2, normalized_stress: true), [x, key])

    assert_all_close(
      model.embedding,
      Nx.tensor([
        [-0.17997372150421143, 0.7225074768066406],
        [-0.3138044774532318, 0.3934117257595062],
        [-0.0900932177901268, 0.19507794082164764],
        [0.2092301845550537, 0.295993834733963],
        [0.24611115455627441, 0.0019988759886473417],
        [0.4951189458370209, 0.08028026670217514],
        [0.12963972985744476, -0.3193856179714203],
        [0.19291982054710388, -0.44776636362075806],
        [-0.2770233750343323, -0.4146113097667694],
        [-0.3582141101360321, -0.5444929003715515]
      ])
    )

    assert_all_close(model.stress, 0.13638167083263397)
    assert_all_close(model.n_iter, Nx.tensor(20))
  end

  test "epsilon set to a smaller then default value" do
    key = key()
    x = x()

    model =
      EXLA.jit_apply(&MDS.fit(&1, metric: false, key: &2, normalized_stress: true, eps: 1.0e-4), [
        x,
        key
      ])

    assert_all_close(
      model.embedding,
      Nx.tensor([
        [-0.35130712389945984, 0.6258886456489563],
        [-0.4270354211330414, 0.4396686255931854],
        [-0.30671024322509766, 0.2688262462615967],
        [-0.12758131325244904, 0.18020282685756683],
        [-0.05403336510062218, 0.01867777667939663],
        [0.17203716933727264, 0.044468216598033905],
        [0.2791652977466583, -0.09437420219182968],
        [0.2869844138622284, -0.3071449398994446],
        [0.2768166959285736, -0.49931082129478455],
        [0.2563020884990692, -0.678329348564148]
      ])
    )

    # as expected smaller value of stress (loss) and bigger number of iterations
    assert_all_close(model.stress, 0.03167537972331047)
    assert_all_close(model.n_iter, Nx.tensor(116))
  end

  test "smaller max_iter value (100)" do
    key = key()
    x = x()

    model =
      EXLA.jit_apply(
        &MDS.fit(&1, metric: false, key: &2, normalized_stress: true, eps: 1.0e-4, max_iter: 100),
        [x, key]
      )

    assert_all_close(
      model.embedding,
      Nx.tensor([
        [-0.34521010518074036, 0.6345276236534119],
        [-0.4247266352176666, 0.43899187445640564],
        [-0.2903931438922882, 0.2677172124385834],
        [-0.09941618889570236, 0.19031266868114471],
        [-0.03261081129312515, 0.019261524081230164],
        [0.2049849033355713, 0.07233452051877975],
        [0.29381951689720154, -0.09455471485853195],
        [0.27441200613975525, -0.320201575756073],
        [0.2368578165769577, -0.5156480669975281],
        [0.19262047111988068, -0.6936381459236145]
      ])
    )

    # same params as in previous test, but smaller number of iterations, cupped on 100
    assert_all_close(model.stress, 0.040396787226200104)
    assert_all_close(model.n_iter, Nx.tensor(100))
  end
end
