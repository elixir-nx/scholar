<!-- livebook:{"persist_outputs":true} -->

# K-Nearest Neighbors

```elixir
Mix.install([
  {:scholar, github: "elixir-nx/scholar", override: true},
  {:explorer, "~> 0.6.1"},
  {:exla, "~> 0.6.0"},
  {:nx, "~> 0.6.0", override: true},
  {:req, "~> 0.3.9"},
  {:vega_lite, github: "livebook-dev/vega_lite", override: true},
  {:kino_vega_lite, "~> 0.1.9"},
  {:kino, "~> 0.10.0"},
  {:scidata, "~> 0.1.10"},
  {:kino_explorer, "~> 0.1.7"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Setup

We will extensively use VegaLite, Explorer, and Scholar throughout this guide, so let's define some aliases:

```elixir
alias VegaLite, as: Vl
alias VegaLite.Data
require Explorer.DataFrame, as: DF
require Explorer.Series, as: S
require Explorer.Query, as: Q
alias Scholar.Neighbors.KNearestNeighbors, as: KNN
alias Scholar.Metrics.Classification
alias Scholar.Metrics.Regression
```

<!-- livebook:{"output":true} -->

```
Scholar.Metrics.Regression
```

And let's configure `EXLA.Backend` as our default across the notebook and all branched sections:

```elixir
Nx.global_default_backend(EXLA.Backend)
seed = 42
key = Nx.Random.key(42)
```

<!-- livebook:{"output":true} -->

```

15:47:18.744 [info] TfrtCpuClient created.

```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u32[2]
  EXLA.Backend<host:0, 0.2402556149.2641494028.24958>
  [0, 42]
>
```

## Introduction

This notebook will cover the three primary applications of K-Nearest Neighbors: classification, regression, and
anomaly detection.

<!-- livebook:{"branch_parent_index":1} -->

## Classification

The process of classification using KNN is relatively straightforward. We start by working with a dataset where each sample is assigned a label. To predict the label of a new sample, we compute the distance between it and all the other samples in the dataset. Next, we select only the $k$ closest samples based on the distance metric, where $k$ is a user-defined parameter. We then examine the labels of these $k$ samples and choose the label that appears most frequently. This label is assigned as the predicted label for the new sample.

Let's first grasp how kNN works visually with a small example.

```elixir
data =
  DF.new(
    x: [-1, 0.2, -0.5, -2.1, -2.3, -2.2, 0.1, 0.3, 0.4, 0.7, 1.3],
    y: [-0.1, 0.4, 0.5, 0.4, 1.1, -1.0, -0.1, 0.2, 1.5, 1.6, 0.9],
    label: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]
  )

point_to_predict = DF.new(x: [0.0], y: [0.0])

k_eq_3 = DF.new(x: [0.45], y: [0.45], name: ["k = 3"])
k_eq_5 = DF.new(x: [0.72], y: [0.72], name: ["k = 5"])

Vl.new(
  title: [
    text: "Scatterplot showing KNN prediction process",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.layers([
  Vl.new()
  |> Vl.data_from_values(data)
  |> Vl.mark(:point, size: 200, filled: true)
  |> Vl.encode_field(:shape, "label", type: :nominal)
  |> Vl.encode_field(:x, "x",
    type: :quantitative,
    scale: [domain: [-2.4, 1.5]],
    axis: [grid: false]
  )
  |> Vl.encode_field(:y, "y",
    type: :quantitative,
    scale: [domain: [-1.2, 1.8]],
    axis: [grid: false]
  )
  |> Vl.encode_field(:color, "label", type: :nominal, scale: [scheme: :plasma]),
  Data.chart(
    point_to_predict,
    [type: :point, color: :green, size: 400, shape: :triangle, filled: true],
    x: "x",
    y: "y"
  ),
  Data.chart(
    point_to_predict,
    [type: :arc, outer_radius: 99, inner_radius: 97, color: :brown],
    x: "x",
    y: "y"
  ),
  Data.chart(
    point_to_predict,
    [type: :arc, outer_radius: 170, inner_radius: 168, color: :blue],
    x: "x",
    y: "y"
  ),
  Data.chart(k_eq_3, [type: :text, size: 20, color: :brown],
    x: "x",
    y: "y",
    extra_fields: ["name"]
  )
  |> Vl.encode_field(:text, "name", type: :nominal),
  Data.chart(k_eq_5, [type: :text, size: 20, color: :blue],
    x: "x",
    y: "y",
    extra_fields: ["name"]
  )
  |> Vl.encode_field(:text, "name", type: :nominal)
])
```

Note that the final prediction may vary depending on the value of $k$. For example, with $k = 3$, we would predict the green triangle as an orange square (1), whereas with $k = 5$, the purple circle (0) would be the final prediction.

Let's now test this using Scholar code. First, we will define our data.

```elixir
x = Nx.stack(DF.discard(data, "label"), axis: 1)
labels = Nx.stack(DF.select(data, "label"), axis: 1) |> Nx.squeeze(axes: [1])
x_pred = Nx.stack(point_to_predict, axis: 1)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f64[1][2]
  EXLA.Backend<host:0, 0.2402556149.2641494028.25436>
  [
    [0.0, 0.0]
  ]
>
```

Let's now try with $k = 3$.

```elixir
model = KNN.fit(x, labels, num_classes: 2, num_neighbors: 3)
KNN.predict(model, x_pred)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1]
  EXLA.Backend<host:0, 0.2402556149.2641494028.25513>
  [1]
>
```

And $k = 5$.

```elixir
model = KNN.fit(x, labels, num_classes: 2, num_neighbors: 5)
KNN.predict(model, x_pred)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1]
  EXLA.Backend<host:0, 0.2402556149.2641494028.25586>
  [0]
>
```

As we can see, the predictions match our intuition from analyzing the plot.

Now, let's try KNN on a more complicated dataset: the Wine dataset. Our task will be to classify the quality of the wine. Before we load the dataset into `Explorer.DataFrame` for more efficient exploration, let's check some more detailed information about the dataset.

```elixir
info =
  Req.get!(
    "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality.names"
  ).body

Kino.Markdown.new(info)
```

```elixir
data =
  Req.get!(
    "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
  ).body

df_data = DF.load_csv!(data, delimiter: ";", dtypes: %{"total sulfur dioxide": :float})
tensor_data = Nx.stack(df_data, axis: 1)
df_data
```

As we can see, there are no null values in the dataset. Now, let's check the size of the dataset.

```elixir
DF.shape(df_data)
```

<!-- livebook:{"output":true} -->

```
{4898, 12}
```

Let's check some statistical properties of the dataset. We will start with *skewness*, which measures the asymmetry of the probability distribution of a random variable about its mean. To better understand this concept, please take a look at the picture below.

| ![Skewness](https://upload.wikimedia.org/wikipedia/commons/c/cc/Relationship_between_mean_and_median_under_different_skewness.png) |
| :--------------------------------------------------------------------------------------------------------------------------------: |
| Figure 1: A general relationship of mean and median under differently skewed unimodal distribution                                 |

Now, let's check the skewness of our dataset using Scholar.Stats.skew function.

```elixir
Scholar.Stats.skew(tensor_data)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f64[12]
  EXLA.Backend<host:0, 0.2402556149.2641494028.25766>
  [0.6475530855160632, 1.5764965159574844, 1.2815277799152376, 1.0767638711454446, 5.0217921696710315, 1.4063140718346212, 0.3905901775815236, 0.9774735389046988, 0.45764233925379794, 0.9768943947733456, 0.4871927332763434, 0.15574868141362447]
>
```

As we can see, all features have positive skewness, which means that their distributions are more similar to the left plot in the picture above.

Moving on to another statistical function, let's discuss *kurtosis*. Kurtosis measures how much data is located in the tails of distributions. If the kurtosis is greater than 0, the distribution is said to be "platykurtic", indicating that it has more extreme values than a univariate normal distribution. Similarly, a "leptokurtic" distribution has positive kurtosis and less extreme values, while a "mesokurtic" distribution has the same kurtosis as a normal distribution. Let's check the kurtosis of our dataset.

| ![Skewness](https://vitalflux.com/wp-content/uploads/2023/01/fourth-moment-kurtosis-640x334.png) |
| :----------------------------------------------------------------------------------------------: |
| Figure 2: Plot showing Platykurtic, Mesokurtic and Leptokurtic distributions                     |

```elixir
Scholar.Stats.kurtosis(tensor_data)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f64[12]
  EXLA.Backend<host:0, 0.2402556149.2641494028.25793>
  [2.168736944824719, 5.08520490451785, 6.167374226819426, 3.4650542966046363, 37.52503905008619, 11.453415905047144, 0.5700448984658735, 9.78258726703508, 0.5290085383907339, 1.5880812942840778, -0.6989373013774784, 0.21508011570192975]
>
```

Almost all features have positive kurtosis (they are leptokurtic). `alcohol` has negative excess kurtosis, which means it is platykurtic. Below there is Kernel Density Estimate (KDE) to check how exactly this tail look like.

```elixir
# Increase the sample size (or use 1.0 to plot all data)
sample = DF.sample(df_data, 0.5, seed: seed)

Vl.new(
  title: [
    text: "KDE plots of Features",
    anchor: :middle,
    offset: 20
  ],
  width: 700,
  height: 300
)
|> Vl.data_from_values(sample, only: ~w(alcohol density pH))
|> Vl.concat([
  Vl.new(
    title: [
      text: "KDE plot of alcohol feature",
      offset: 20
    ],
    width: 350,
    height: 300
  )
  |> Vl.transform(density: "alcohol")
  |> Vl.mark(:area, color: "lightblue")
  |> Vl.encode_field(:x, "value", type: :quantitative, title: "% of alcohol")
  |> Vl.encode_field(:y, "density", type: :quantitative),
  Vl.new(
    title: [
      text: "KDE plot of pH feature",
      offset: 20
    ],
    width: 350,
    height: 300
  )
  |> Vl.transform(density: "pH")
  |> Vl.mark(:area, color: "lightgreen")
  |> Vl.encode_field(:x, "value", type: :quantitative, title: "pH")
  |> Vl.encode_field(:y, "density", type: :quantitative)
])
```

The previous analysis indicates that the alcohol feature has more extreme values than pH. Now, we will create a correlation heatmap to investigate the relationships between the features in the dataset.

```elixir
correlation = Scholar.Covariance.correlation_matrix(tensor_data, biased: true)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f64[12][12]
  EXLA.Backend<host:0, 0.2402556149.2641494028.25893>
  [
    [1.0, -0.022697290146647113, 0.2891806976936754, 0.08902070136217163, 0.023085643656347757, -0.049395859081173187, 0.09106975615864087, 0.2653310138391866, -0.42585829099138195, -0.017142985021137338, -0.12088112319453302, -0.11366283071301796],
    [-0.022697290146647113, 1.0000000000000007, -0.14947181064857518, 0.06428606009099526, 0.07051157147938472, -0.09701193927796008, 0.0892605035517784, 0.02711384546243434, -0.03191536827348892, -0.03572814690581474, 0.06771794277504414, -0.19472296892113428],
    [0.2891806976936754, -0.14947181064857518, 1.0000000000000009, 0.09421162429049387, 0.11436444838681839, 0.09407722101469612, 0.12113079766441823, 0.14950257057002272, -0.16374821140062368, 0.06233094028523288, -0.07572873005717942, -0.009209090883975417],
    [0.08902070136217163, 0.06428606009099526, 0.09421162429049387, 1.0000000000000002, 0.0886845359412256, 0.299098353693518, 0.40143931115992487, 0.8389664549045833, -0.19413345399025597, -0.026664365853858334, -0.45063122203172884, -0.09757682889469321],
    [0.023085643656347757, 0.07051157147938472, ...],
    ...
  ]
>
```

```elixir
{corr_size, _} = Nx.shape(correlation)
correlation_list = Nx.to_flat_list(correlation)
column_names = DF.names(df_data)

width = 630
height = 630

corr_to_plot =
  DF.new(
    x: List.flatten(List.duplicate(column_names, corr_size)),
    y: List.flatten(for name <- column_names, do: List.duplicate(name, corr_size)),
    corr_val: Enum.map(correlation_list, fn x -> Float.round(x, 2) end)
  )

Vl.new(
  title: [
    text: "Correlation Matrix for Wine Dataset",
    offset: 20
  ],
  width: width,
  height: height
)

Vl.new(
  title: [
    text: "Correlation Matrix for California Housing",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Data.heatmap(corr_to_plot,
  x: "x",
  y: "y",
  color: [field: "corr_val", type: :quantitative, scale: [scheme: :viridis]],
  text: "corr_val"
)
```

We can observe from the correlation heatmap that there is no strong correlation between the quality of wine and any single feature. However, we can see that there are two strong correlations: density is proportional to the amount of residual sugar and inversely proportional to the amount of alcohol.

Given that citric acid, free sulfur dioxide, and sulphates are not strongly correlated with the quality of wine or any other features, we can drop them from the dataset to simplify our analysis.

Before dropping the features, it is important to consider their potential impact on the final prediction. Even if they are not strongly correlated with the target variable (quality), they may still provide useful information for the KNN algorithm. It is recommended to experiment with different feature subsets to find the optimal combination for the given task. You can try running the notebook again without dropping these features.

```elixir
tensor_data =
  DF.discard(df_data, ["citric acid", "free sulfur dioxide", "sulphates"]) |> Nx.stack(axis: 1)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f64[4898][9]
  EXLA.Backend<host:0, 0.2402556149.2641494028.26000>
  [
    [7.0, 0.27, 20.7, 0.045, 170.0, 1.001, 3.0, 8.8, 6.0],
    [6.3, 0.3, 1.6, 0.049, 132.0, 0.994, 3.3, 9.5, 6.0],
    [8.1, 0.28, 6.9, 0.05, 97.0, 0.9951, 3.26, 10.1, 6.0],
    [7.2, 0.23, 8.5, 0.058, 186.0, 0.9956, 3.19, 9.9, 6.0],
    [7.2, 0.23, 8.5, 0.058, 186.0, 0.9956, 3.19, 9.9, 6.0],
    [8.1, 0.28, 6.9, 0.05, 97.0, ...],
    ...
  ]
>
```

The next step will be splitting the dataset into features and labels. To make the classification task easier, we will convert the labels into three categories: "poor," "medium," and "excellent". Additionally, we will normalize the features using the standard scaler.

```elixir
x = tensor_data[[.., 0..-2//1]]
y = tensor_data[[.., -1]]

# convert quality into labels quality: (0, 4) poor => 0, (5, 6) medium => 1, (7, 10) excelent => 2

poor_and_better_mask = Nx.greater(y, 4)
medium_and_better_mask = Nx.greater(y, 6)

y = Nx.select(poor_and_better_mask, Nx.select(medium_and_better_mask, 2, 1), 0)
x = Scholar.Preprocessing.standard_scale(x)

{x, y}
```

<!-- livebook:{"output":true} -->

```
{#Nx.Tensor<
   f64[4898][8]
   EXLA.Backend<host:0, 0.2402556149.2641494028.26036>
   [
     [-0.29385297541380284, -0.4368649169854585, -0.0027291121847267076, -0.44164614831586296, 3.1698834995014824, -0.4213312276408997, -0.37885264350988346, -0.2556031247705665],
     [-0.30872791733061694, -0.43622741947473787, -0.40860252734351166, -0.4415611486477669, 2.3623866525887167, -0.4214799770600679, -0.3724776684026774, -0.24072818285375244],
     [-0.27047806668738067, -0.43665241781521824, -0.29597796711620483, -0.4415398987307429, 1.6186395567480112, -0.42145660215134145, -0.37332766508363824, -0.22797823263934036],
     [-0.2896029920089988, -0.4377149136664193, -0.2619780998777726, -0.44136989939455074, 3.509882171885805, -0.42144597719282945, -0.3748151592753196, -0.23222821604414437],
     [-0.2896029920089988, -0.4377149136664193, -0.2619780998777726, -0.44136989939455074, 3.509882171885805, -0.42144597719282945, -0.3748151592753196, -0.23222821604414437],
     [-0.27047806668738067, -0.43665241781521824, -0.29597796711620483, -0.4415398987307429, 1.6186395567480112, -0.42145660215134145, -0.37332766508363824, -0.22797823263934036],
     [-0.310852909033019, ...],
     ...
   ]
 >,
 #Nx.Tensor<
   s64[4898]
   EXLA.Backend<host:0, 0.2402556149.2641494028.26013>
   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, ...]
 >}
```

After performing EDA on our wine dataset, we can now train our KNN model and make predictions. However, the question arises as to what value of neighbors should we choose for the KNN model. To answer this question, we will use *K-Fold Cross-Validation* (specifically, Nested Cross-Validation). K-Fold is a procedure performed on the training dataset where we split the data into k smaller subsets (folds). For each tested parameter value, we run k separate trainings and testings, where one fold is the validation (test) dataset, and the other k-1 folds are the training dataset. To make this process clear, there is a GIF below that explains it visually.

| ![KFold](https://upload.wikimedia.org/wikipedia/commons/4/4b/KfoldCV.gif)                                                                                    |
| :----------------------------------------------------------------------------------------------------------------------------------------------------------: |
| Figure 3: Illustration of KFold Cross-Validation when n = 12 observations and k = 3. After data is shuffled, a total of 3 models will be trained and tested. |

```elixir
defmodule Comb do
  def combinations([]), do: [[]]

  def combinations([{name, values} | opts]) do
    for subcombination <- combinations(opts), value <- values do
      [{name, value} | subcombination]
    end
  end
end

Comb.combinations(task: [:classification], num_classes: [3], num_neighbors: Enum.to_list(1..30))
```

<!-- livebook:{"output":true} -->

```
[
  [task: :classification, num_classes: 3, num_neighbors: 1],
  [task: :classification, num_classes: 3, num_neighbors: 2],
  [task: :classification, num_classes: 3, num_neighbors: 3],
  [task: :classification, num_classes: 3, num_neighbors: 4],
  [task: :classification, num_classes: 3, num_neighbors: 5],
  [task: :classification, num_classes: 3, num_neighbors: 6],
  [task: :classification, num_classes: 3, num_neighbors: 7],
  [task: :classification, num_classes: 3, num_neighbors: 8],
  [task: :classification, num_classes: 3, num_neighbors: 9],
  [task: :classification, num_classes: 3, num_neighbors: 10],
  [task: :classification, num_classes: 3, num_neighbors: 11],
  [task: :classification, num_classes: 3, num_neighbors: 12],
  [task: :classification, num_classes: 3, num_neighbors: 13],
  [task: :classification, num_classes: 3, num_neighbors: 14],
  [task: :classification, num_classes: 3, num_neighbors: 15],
  [task: :classification, num_classes: 3, num_neighbors: 16],
  [task: :classification, num_classes: 3, num_neighbors: 17],
  [task: :classification, num_classes: 3, num_neighbors: 18],
  [task: :classification, num_classes: 3, num_neighbors: 19],
  [task: :classification, num_classes: 3, num_neighbors: 20],
  [task: :classification, num_classes: 3, num_neighbors: 21],
  [task: :classification, num_classes: 3, num_neighbors: 22],
  [task: :classification, num_classes: 3, num_neighbors: 23],
  [task: :classification, num_classes: 3, num_neighbors: 24],
  [task: :classification, num_classes: 3, num_neighbors: 25],
  [task: :classification, num_classes: 3, num_neighbors: 26],
  [task: :classification, num_classes: 3, num_neighbors: 27],
  [task: :classification, num_classes: 3, num_neighbors: 28],
  [task: :classification, num_classes: 3, num_neighbors: 29],
  [task: :classification, num_classes: 3, num_neighbors: 30]
]
```

The code implementing KFold cross-validation is located at the beginning of the notebook.

```elixir
min_num_neighbors = 1
param_space_size = 30

# K in KFold
k = 10
train_size = 4000

{indices, _new_key} = Nx.Random.shuffle(key, Nx.iota(Nx.shape(y)))
x = Nx.take(x, indices)
y = Nx.take(y, indices)
{train_data, test_data} = Nx.split(x, train_size)
{train_labels, test_labels} = Nx.split(y, train_size)

folding_fun = fn x -> Scholar.ModelSelection.k_fold_split(x, k) end

scoring_fun = fn x, y, opts ->
  {x_train, x_test} = x
  {y_train, y_test} = y

  model =
    KNN.fit(x_train, y_train,
      num_classes: opts[:num_classes],
      num_neighbors: opts[:num_neighbors],
      task: opts[:task]
    )

  prediction = KNN.predict(model, x_test)

  accuracy = Classification.accuracy(y_test, prediction)
  [accuracy]
end

res =
  Scholar.ModelSelection.grid_search(train_data, train_labels, folding_fun, scoring_fun,
    task: [:classification],
    num_classes: [3],
    num_neighbors: Enum.to_list(min_num_neighbors..param_space_size)
  )

res = for(sub_res <- res, do: sub_res[:score]) |> Nx.concatenate() |> Nx.as_type(:f64)

results =
  DF.new(accuracy: res, num_neighbors: Nx.add(Nx.iota({param_space_size}), min_num_neighbors))
```

To potentially improve our KNN model's performance, we can try setting the weights parameter to `:distance` in `KFold.one_round_fold()`. Next, we can visualize the results of KFold using a plot.

```elixir
Vl.new(
  title: [
    text: "Accuracy vs Number of Neighbors",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Data.chart(results, [type: :line, color: :gray, stroke_dash: [5, 5], point: true],
  x: [field: "num_neighbors", type: :quantitative, scale: [domain: [1, 31]]],
  y: [field: "accuracy", type: :quantitative, scale: [domain: [0.7, 0.8]]]
)
```

```elixir
best_neighbors = Nx.add(Nx.argmax(res), min_num_neighbors) |> Nx.to_number()
```

<!-- livebook:{"output":true} -->

```
1
```

Ok, let's test our best model on test data.

```elixir
best_model = KNN.fit(train_data, train_labels, num_neighbors: best_neighbors, num_classes: 3)

final_prediction = KNN.predict(best_model, test_data)
Classification.accuracy(test_labels, final_prediction)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  EXLA.Backend<host:0, 0.2402556149.2641494027.152694>
  0.7672605514526367
>
```

Pretty well, now let's move on to a regression task using KNN.

<!-- livebook:{"branch_parent_index":1} -->

## Regression

KNNs can also be used in regression tasks. We will explore this on a dataset about Airfoil Self-Noise. Here's a brief description of the dataset:

**Data Set Information**:

The NASA data set comprises different size NACA 0012 airfoils at various wind tunnel speeds and angles of attack. The span of the airfoil and the observer position were the same in all of the experiments.

**Attribute Information**:

This problem has the following inputs:

1. Frequency, in Hertzs.
2. Angle of attack, in degrees.
3. Chord length, in meters.
4. Free-stream velocity, in meters per second.
5. Suction side displacement thickness, in meters.

The only output is:

1. Scaled sound pressure level, in decibels.

Dua, D. and Graff, C. (2019). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.

```elixir
dataset =
  Req.get!(
    "https://archive.ics.uci.edu/ml/machine-learning-databases/00291/airfoil_self_noise.dat"
  ).body

column_names = [
  "frequency",
  "angle_of_attack",
  "chord_length",
  "free_stream_velocity",
  "suction_side_displacement_thickness",
  "scaled_sound_pressure_level"
]

dataset_df = DF.load_csv!(dataset, header: false, delimiter: "\t") |> DF.rename(column_names)
labels = DF.select(dataset_df, "scaled_sound_pressure_level")
data = DF.discard(dataset_df, "scaled_sound_pressure_level")
```

Below are the KDE plots of the dataset's features. We will analyze them in the next step.

```elixir
Vl.new(
  title: [
    text: "KDE plots of Features",
    anchor: :middle,
    offset: 20
  ]
)
|> Vl.data_from_values(data)
|> Vl.concat(
  [
    Vl.new()
    |> Vl.concat(
      [
        Vl.new(
          title: [
            text: "KDE plot of Frequency feature",
            offset: 20
          ],
          width: 350,
          height: 300
        )
        |> Vl.transform(density: "frequency")
        |> Vl.mark(:area, color: "lightblue")
        |> Vl.encode_field(:x, "value", type: :quantitative, title: "Frequency (Hz)")
        |> Vl.encode_field(:y, "density", type: :quantitative),
        Vl.new(
          title: [
            text: "KDE plot of Angle of Attack feature",
            offset: 20
          ],
          width: 350,
          height: 300
        )
        |> Vl.transform(density: "angle_of_attack")
        |> Vl.mark(:area, color: "lightgreen")
        |> Vl.encode_field(:x, "value", type: :quantitative, title: "Angle of attack")
        |> Vl.encode_field(:y, "density", type: :quantitative),
        Vl.new(
          title: [
            text: "KDE plot of Chord length feature",
            offset: 20
          ],
          width: 350,
          height: 300
        )
        |> Vl.transform(density: "chord_length")
        |> Vl.mark(:area, color: "pink")
        |> Vl.encode_field(:x, "value", type: :quantitative, title: "Chord length")
        |> Vl.encode_field(:y, "density", type: :quantitative)
      ],
      :vertical
    ),
    Vl.new()
    |> Vl.concat(
      [
        Vl.new(
          title: [
            text: "KDE plot of Free Stream Velocity feature",
            offset: 20
          ],
          width: 350,
          height: 300
        )
        |> Vl.data_from_values(data)
        |> Vl.transform(density: "free_stream_velocity")
        |> Vl.mark(:area, color: "purple")
        |> Vl.encode_field(:x, "value", type: :quantitative, title: "Free-stream velocity")
        |> Vl.encode_field(:y, "density", type: :quantitative),
        Vl.new(
          title: [
            text: ["KDE plot of Suction Side Displacement", "Thickness feature"],
            offset: 20
          ],
          width: 350,
          height: 300
        )
        |> Vl.data_from_values(data)
        |> Vl.transform(density: "suction_side_displacement_thickness")
        |> Vl.mark(:area, color: "red")
        |> Vl.encode_field(:x, "value",
          type: :quantitative,
          title: "Suction Side Displacement Thickness"
        )
        |> Vl.encode_field(:y, "density", type: :quantitative)
      ],
      :vertical
    )
  ],
  :horizontal
)
```

The Suction Side Displacement Thickness and Frequency features have asymmetric distributions with many observations having small values. To make these distributions less skewed, we will use the logarithms of these two features.

```elixir
data =
  DF.mutate(data,
    frequency_log: log(frequency),
    suction_side_displacement_thickness_log: log(suction_side_displacement_thickness)
  )

data = DF.discard(data, ["frequency", "suction_side_displacement_thickness"])
```

Scale data and convert them to tensors.

```elixir
x = Nx.stack(data, axis: 1) |> Scholar.Preprocessing.standard_scale()
y = Nx.stack(labels, axis: 1) |> Nx.squeeze(axes: [1])
{x, y}
```

<!-- livebook:{"output":true} -->

```
{#Nx.Tensor<
   f64[1503][5]
   EXLA.Backend<host:0, 0.2402556149.2641494027.200991>
   [
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.24959453243691035, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.2391306895323175, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.22866684662772468, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.21709086757891163, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.2066270246743188, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.19616318176972597, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.18532568847301975, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.17412335981632007, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.1636595169117272, -0.8410438169469526],
     [-0.5630552019680845, -0.5487622533323925, 2.780406864058286, -0.15282202361502104, ...],
     ...
   ]
 >,
 #Nx.Tensor<
   f64[1503]
   EXLA.Backend<host:0, 0.2402556149.2641494027.200994>
   [126.201, 125.201, 125.951, 127.591, 127.461, 125.571, 125.201, 123.061, 121.301, 119.541, 117.151, 115.391, 112.241, 108.721, 126.416, 127.696, 128.086, 126.966, 126.086, 126.986, 126.616, 124.106, 123.236, 121.106, 119.606, 117.976, 116.476, 113.076, 111.076, 118.129, 119.319, 122.779, 124.809, 126.959, 128.629, 129.099, 127.899, 125.499, 124.049, 123.689, 121.399, 120.319, 119.229, 117.789, 116.229, 114.779, 112.139, 109.619, ...]
 >}
```

In this section, we will apply a similar KFold procedure as in the classification section to find the best value for the `:num_neighbors` parameter in the KNN regression model.

```elixir
min_num_neighbors = 1
param_space_size = 30

# K in KFold
k = 10
train_size = 1100

{indices, _new_key} = Nx.Random.shuffle(key, Nx.iota(Nx.shape(y)))
x_shuffled = Nx.take(x, indices)
y_shuffled = Nx.take(y, indices)
{train_data, test_data} = Nx.split(x_shuffled, train_size)
{train_labels, test_labels} = Nx.split(y_shuffled, train_size)

folding_fun = fn x -> Scholar.ModelSelection.k_fold_split(x, k) end

scoring_fun = fn x, y, opts ->
  {x_train, x_test} = x
  {y_train, y_test} = y

  model =
    KNN.fit(x_train, y_train,
      num_classes: opts[:num_classes],
      num_neighbors: opts[:num_neighbors],
      task: opts[:task]
    )

  prediction = KNN.predict(model, x_test)

  rmse = Regression.mean_square_error(y_test, prediction) |> Nx.sqrt()
  [rmse]
end

res =
  Scholar.ModelSelection.grid_search(train_data, train_labels, folding_fun, scoring_fun,
    task: [:regression],
    # dummy, for regression it doesn't matter
    num_classes: [3],
    num_neighbors: Enum.to_list(min_num_neighbors..param_space_size)
  )

res = for(sub_res <- res, do: sub_res[:score]) |> Nx.concatenate() |> Nx.as_type(:f64)

results = DF.new(RMSE: res, num_neighbors: Nx.add(Nx.iota({param_space_size}), min_num_neighbors))
```

```elixir
Vl.new(
  title: [
    text: "RMSE vs. Number of Neighbors",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.data_from_values(results)
|> Vl.mark(:line, color: :gray, stroke_dash: [5, 5], point: true)
|> Vl.encode_field(:x, "num_neighbors", type: :quantitative, scale: [domain: [1, 31]])
|> Vl.encode_field(:y, "RMSE", type: :quantitative, scale: [domain: [2.6, 6.0]])
```

```elixir
best_neighbors = Nx.add(Nx.argmin(res), min_num_neighbors) |> Nx.to_number()
```

<!-- livebook:{"output":true} -->

```
2
```

The best value is 2. Now try this value to a final prediction.

```elixir
best_model =
  KNN.fit(train_data, train_labels,
    num_neighbors: best_neighbors,
    num_classes: 3,
    task: :regression
  )

final_prediction = KNN.predict(best_model, test_data)
Regression.mean_square_error(test_labels, final_prediction) |> Nx.sqrt()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f64
  EXLA.Backend<host:0, 0.2402556149.2641494027.210679>
  2.2414312639566227
>
```

### Outliers prediction

<!-- livebook:{"break_markdown":true} -->

KNNs can be used for outlier detection. In this task, we will also use the Airfoil Self-Noise dataset. We will calculate for each sample a mean value of distances to the three closest points from dataset.

```elixir
model = KNN.fit(x, y, num_neighbors: 3, task: :regression)
{num_samples, _} = Nx.shape(x)
{distances, indices} = KNN.k_neighbors(model, x)

mean_distances = Nx.mean(distances, axes: [1], keep_axes: true)

samples_mean_distances =
  Nx.concatenate([mean_distances, Nx.iota({num_samples, 1})], axis: 1)
  |> DF.new()
  |> DF.rename(["mean_distances", "index"])
```

Now, plot the mean values of distances.

```elixir
Vl.new(
  title: [
    text: "Plot to check anomalies",
    offset: 20
  ],
  width: 800,
  height: 630
)
|> Vl.layers([
  Data.chart(samples_mean_distances, [type: :line, color: :jet],
    x: [field: "index", type: :quantitative, scale: [domain: [0, 1510]]],
    extra_fields: ["mean_distances"]
  )
  |> Vl.encode_field(:y, "mean_distances",
    type: :quantitative,
    title: "Mean distance to clusters",
    scale: [domain: [0.0065, 0.012]]
  ),
  Data.chart(DF.new(y: [0.009]), [type: :rule, color: :red, stroke_dash: [5, 5]], y: "y")
])
```

We can assume, that samples with average distance bigger than 0.0105 can be treated as outliers.

```elixir
data = DF.put(data, :is_outlier, Nx.greater(mean_distances, 0.0105))
```

```elixir
Vl.new(
  title: [
    text: "Logarithm of Frequency vs Logarithm of Suction Side Displacement Thickness",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.data_from_values(data)
|> Vl.layers([
  Vl.new()
  |> Vl.param("brush", select: :interval)
  |> Vl.mark(:circle)
  |> Vl.encode_field(:x, "frequency_log", type: :quantitative, scale: [domain: [4.5, 10.5]])
  |> Vl.encode_field(:y, "suction_side_displacement_thickness_log",
    type: :quantitative,
    scale: [domain: [-8.0, -2.5]]
  )
  |> Vl.encode(:color,
    condition: [param: "brush", field: "is_outlier", type: :nominal],
    value: :gray
  ),
  Vl.new()
  |> Vl.transform(filter: [param: "brush", field: "is_outlier", equal: true])
  |> Vl.mark(:text)
  |> Vl.encode(:x, value: 11)
  |> Vl.encode(:y, value: -3.5)
  |> Vl.encode_field(:text, "filter",
    type: :quantitative,
    aggregate: :count
  )
])
```
