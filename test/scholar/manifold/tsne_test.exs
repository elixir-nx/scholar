defmodule Scholar.Manifold.TSNETest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.TSNE
  doctest TSNE

  @key Nx.Random.key(42)
  @x Nx.tensor([
       [
         -8.73180761,
         -17.31599354,
         -10.76061306,
         44.89164949,
         3.12358324,
         -12.12349236
       ],
       [
         7.64626495,
         18.55374334,
         3.87725984,
         -6.99299854,
         -9.36734843,
         4.55923917
       ],
       [
         20.09781323,
         8.68550196,
         8.43256455,
         -19.15829538,
         31.40440792,
         6.06427556
       ],
       [
         10.63844377,
         12.75106034,
         1.43716746,
         22.80253916,
         -30.5268915,
         9.39948666
       ],
       [
         4.86846911,
         -28.12055241,
         -6.08674611,
         17.03477114,
         6.65227597,
         -32.9099819
       ],
       [
         -6.85085101,
         -16.87612764,
         -11.54632153,
         -51.06982144,
         -6.74068325,
         8.01699475
       ],
       [
         5.54656739,
         38.3957026,
         24.36609113,
         6.97242576,
         30.16740117,
         -28.33044809
       ],
       [
         -9.46902188,
         -28.02162129,
         37.34167044,
         -5.5330473,
         2.98759518,
         -19.68337166
       ],
       [
         8.7946142,
         0.15558464,
         0.47478064,
         26.20112788,
         47.17380434,
         19.2504862
       ],
       [
         -9.549788,
         7.08735882,
         30.68402683,
         31.23933105,
         4.33932039,
         11.94982724
       ]
     ])

  @x_wide Nx.tensor([[1, 2, 3, 1], [2, 56, 2, 4]])

  test "all default params" do
    embedding = TSNE.fit(@x, key: @key)

    expected =
      Nx.tensor([
        [-53.53498458862305, 141.47708129882812],
        [62.434783935546875, -8.663802146911621],
        [1.1455897092819214, -58.12458038330078],
        [15.411615371704102, 31.276975631713867],
        [-1.600449562072754, -0.8674168586730957],
        [32.58098602294922, -85.54332733154297],
        [29.547317504882812, 8.689169883728027],
        [22.506656646728516, -9.870643615722656],
        [-119.04460906982422, -1.2769389152526855],
        [10.55148696899414, -17.096540451049805]
      ])

    assert_all_close(embedding, expected)
  end

  test "test for wide matrix" do
    embedding = TSNE.fit(@x_wide, key: @key)

    expected =
      Nx.tensor([
        [3679.796875, 0.0],
        [-3679.796875, 0.0]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default num_components" do
    embedding = TSNE.fit(@x, num_components: 3, key: @key)

    expected =
      Nx.tensor([
        [-1.8766953945159912, -0.8595688343048096, 2.919325351715088],
        [-4.469432830810547, 4.955996036529541, -0.45173633098602295],
        [-1.0309523344039917, 9.212959289550781, 2.0173211097717285],
        [-7.146204948425293, -3.228529930114746, -2.2784125804901123],
        [-7.251376152038574, -3.374234676361084, -2.844855785369873],
        [-2.8190832138061523, 3.4020588397979736, 5.268616676330566],
        [-1.3570380210876465, 0.8994224667549133, 1.038955807685852],
        [12.099328994750977, -4.93052864074707, -2.2077226638793945],
        [-0.6444416046142578, -4.907196044921875, -1.334627628326416],
        [14.495301246643066, -1.169534683227539, -2.126943826675415]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default perplexity" do
    embedding = TSNE.fit(@x, perplexity: 5, key: @key)

    expected =
      Nx.tensor([
        [10.765605926513672, 15.370049476623535],
        [85.68479919433594, -94.71454620361328],
        [-135.8154754638672, 90.65518188476562],
        [-26.397457122802734, -125.1629638671875],
        [-14.444628715515137, 9.014686584472656],
        [95.48921203613281, 3.930342197418213],
        [-25.713642120361328, -11.954283714294434],
        [-11.639439582824707, -12.724642753601074],
        [46.66755294799805, -10.349587440490723],
        [-24.5968017578125, 135.9352569580078]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default learning_rate" do
    embedding = TSNE.fit(@x, learning_rate: 100, key: @key)

    expected =
      Nx.tensor([
        [-2.0807719230651855, -7.918057918548584],
        [2.831566095352173, -6.691900253295898],
        [-12.179752349853516, -12.317314147949219],
        [-0.7235263586044312, 10.08445930480957],
        [4.194637298583984, 6.559009552001953],
        [6.072756767272949, 2.9850857257843018],
        [0.30952686071395874, -11.06390380859375],
        [1.7182531356811523, 9.67526626586914],
        [0.5874165296554565, 3.3545517921447754],
        [-0.7300540208816528, 5.332911968231201]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default max_iter" do
    embedding = TSNE.fit(@x, num_iters: 333, key: @key)

    expected =
      Nx.tensor([
        [-19.072818756103516, 159.60926818847656],
        [1.3988478183746338, 1.6701154708862305],
        [-8.892325401306152, -1.8828166723251343],
        [-0.24954938888549805, -18.246187210083008],
        [17.941997528076172, -106.79717254638672],
        [10.342303276062012, 2.533393383026123],
        [-4.80264949798584, -0.8543813824653625],
        [-134.93646240234375, -27.031400680541992],
        [132.14447021484375, -1.7187316417694092],
        [6.124286651611328, -7.282605171203613]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default init" do
    embedding = TSNE.fit(@x, init: :random, key: @key)

    expected =
      Nx.tensor([
        [11.895841598510742, -16.399948120117188],
        [23.96310043334961, -20.192819595336914],
        [139.05288696289062, -64.61959838867188],
        [10.42809009552002, -25.98411750793457],
        [14.136453628540039, 4.297189712524414],
        [-5.043922424316406, 102.03876495361328],
        [-2.542982339859009, -61.87345886230469],
        [-177.80848693847656, 11.263525009155273],
        [4.459288597106934, -24.146390914916992],
        [-18.539642333984375, 95.6163558959961]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default metric" do
    embedding = TSNE.fit(@x, key: @key, metric: :chebyshev)

    expected =
      Nx.tensor([
        [2.604278087615967, -100.68524932861328],
        [5.846366882324219, -53.27583312988281],
        [8.562166213989258, -38.018890380859375],
        [18.852039337158203, 13.029205322265625],
        [19.86124038696289, 22.388168334960938],
        [-33.23206329345703, 18.488771438598633],
        [-13.544496536254883, 53.925811767578125],
        [-1.1907639503479004, 42.48714065551758],
        [-5.692774772644043, 22.050697326660156],
        [-2.0605876445770264, 19.605968475341797]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default exaggeration" do
    embedding = TSNE.fit(@x, key: @key, exaggeration: 4.5)

    expected =
      Nx.tensor([
        [49.713783264160156, -3.4101526737213135],
        [-30.54273796081543, 19.592681884765625],
        [90.19834899902344, -25.60640525817871],
        [29.829374313354492, 6.614677429199219],
        [11.306724548339844, 6.371883392333984],
        [21.72574806213379, 8.363205909729004],
        [55.91529083251953, 0.1634223908185959],
        [-81.51355743408203, -23.467527389526367],
        [-105.60922241210938, -7.828176498413086],
        [-41.02332305908203, 19.206113815307617]
      ])

    assert_all_close(embedding, expected)
  end
end
