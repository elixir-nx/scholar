# Linear Regression in Practice

```elixir
Mix.install(
  [
    {:scholar, github: "elixir-nx/scholar"},
    {:explorer, github: "elixir-nx/explorer"},
    {:nx, github: "elixir-nx/nx", sparse: "nx", override: true},
    {:exla, github: "elixir-nx/nx", sparse: "exla", override: true},
    {:rustler, ">= 0.0.0", optional: true},
    {:req, "~> 0.3.3"},
    {:vega_lite, "~> 0.1.6"},
    {:kino_vega_lite, "~> 0.1.7"},
    {:kino, "~> 0.8.0"}
  ],
  config: [
    nx: [default_defn_options: [compiler: EXLA]]
  ]
)
```

## Introduction

In the livebook, we will cover the typical use cases of linear regression on practical examples.

```elixir
alias VegaLite, as: Vl
require Explorer.DataFrame
```

<!-- livebook:{"branch_parent_index":0} -->

## Linear Regression on Synthetic Data

```elixir
use Nx.Defn.Kernel
```

Before we dive into real-life use cases of linear regression, we start with a simpler one. We will generate data with a linear pattern and then use `Scholar.Linear.LinearRegression` to compute regression.

Firstly, we generate the data which simulates the function $f(x) = 3x + 4$ with added uniform, zero-mean noise. `Nx.Random.uniform` creates a tensor with a given shape and type.

```elixir
key = Nx.Random.key(42)
size = 100
{uniform_x, new_key} = Nx.Random.uniform(key, shape: {size, 1}, type: :f32)
{uniform_y, _} = Nx.Random.uniform(new_key, shape: {size, 1}, type: :f32)
x = 2 * uniform_x
y = 3 * x + 4 + (uniform_y - Nx.mean(uniform_y))
```

Now let's plot the generated points.

```elixir
df = Explorer.DataFrame.new(x: Nx.to_flat_list(x), y: Nx.to_flat_list(y))

Vl.new(
  title: [
    text: "Scatterplot of Generated Data",
    offset: 20
  ],
  width: 500,
  height: 500
)
|> Vl.data_from_values(df)
|> Vl.mark(:circle)
|> Vl.encode_field(:x, "x",
  type: :quantitative,
  scale: [domain: [-0.05, 2.05]],
  axis: [grid: false]
)
|> Vl.encode_field(:y, "y", type: :quantitative, scale: [domain: [2.5, 12]], axis: [grid: false])
```

For a regression task, we will use the `Scholar.Linear.LinearRegression` module.

```elixir
model = Scholar.Linear.LinearRegression.fit(x, y)
```

As we can see, the coefficient is almost 3.0, and the intercept is nearly 4.0. Those are decent estimations. They are not exactly equal to 3.0 and 4.0 because we introduced noise to our sample generation.

Now, let's plot the result of linear regression.

```elixir
intercept = model.intercept |> Nx.reshape({}) |> Nx.to_number()
coefficients = model.coefficients |> Nx.reshape({}) |> Nx.to_number()
x_1 = 0
x_2 = 2

df_results =
  Explorer.DataFrame.new(
    x: [x_1, x_2],
    y: [
      x_1 * coefficients + intercept,
      x_2 * coefficients + intercept
    ]
  )

Vl.new(
  title: [
    text: "Scatterplot of Generated Data",
    offset: 20
  ],
  width: 500,
  height: 500
)
|> Vl.layers([
  Vl.new()
  |> Vl.data_from_values(df)
  |> Vl.mark(:circle)
  |> Vl.encode_field(:x, "x",
    type: :quantitative,
    scale: [domain: [-0.05, 2.05]],
    axis: [grid: false]
  )
  |> Vl.encode_field(:y, "y", type: :quantitative, scale: [domain: [2.5, 12]], axis: [grid: false]),
  Vl.new()
  |> Vl.data_from_values(df_results)
  |> Vl.mark(:line, color: :green)
  |> Vl.encode_field(:x, "x", type: :quantitative, scale: [domain: [-0.05, 2.05]])
  |> Vl.encode_field(:y, "y", type: :quantitative, scale: [domain: [2.5, 12]])
])
```

Using `Scholar.Linear.LinearRegression.predict`, we can predict an expected value for a given input. However, we must remember that our prediction will be valid only if we consider linearly dependent data. Fortunately, our data set is perfect for this kind of prediction.

Now we will predict one value and draw it on the previous graph in a different color.

```elixir
x_prediction = Nx.tensor([[0.83]])

y_prediction =
  Scholar.Linear.LinearRegression.predict(model, x_prediction) |> Nx.reshape({}) |> Nx.to_number()

x_prediction = x_prediction |> Nx.reshape({}) |> Nx.to_number()
{x_prediction, y_prediction}
```

```elixir
df_prediction =
  Explorer.DataFrame.new(
    x: [x_prediction],
    y: [y_prediction]
  )

Vl.new(
  title: [
    text: "Scatterplot of Generated Data",
    offset: 20
  ],
  width: 500,
  height: 500
)
|> Vl.layers([
  Vl.new()
  |> Vl.data_from_values(df)
  |> Vl.mark(:circle)
  |> Vl.encode_field(:x, "x",
    type: :quantitative,
    scale: [domain: [-0.05, 2.05]],
    axis: [grid: false]
  )
  |> Vl.encode_field(:y, "y", type: :quantitative, scale: [domain: [2.5, 12]], axis: [grid: false]),
  Vl.new()
  |> Vl.data_from_values(df_results)
  |> Vl.mark(:line, color: :green)
  |> Vl.encode_field(:x, "x", type: :quantitative, scale: [domain: [-0.05, 2.05]])
  |> Vl.encode_field(:y, "y", type: :quantitative, scale: [domain: [2.5, 12]]),
  Vl.new()
  |> Vl.data_from_values(df_prediction)
  |> Vl.mark(:circle, color: :red, size: 80)
  |> Vl.encode_field(:x, "x", type: :quantitative)
  |> Vl.encode_field(:y, "y", type: :quantitative)
])
```

As we expected, the red dot lies on the regression line.

This implementation of linear regression is based on the so-called *Least Squares* method. In practice, the function computes $X^+y$ where $X^+$ is the Moore-Penrose pseudo-inverse matrix, calculated using `Nx.LinAlg.pinv/2`.

```elixir
x_b = Nx.concatenate([Nx.broadcast(1.0, {size, 1}), x], axis: 1)
x_b |> Nx.LinAlg.pinv() |> Nx.dot(y)
```

We are ready to dive into a more complex example!

<!-- livebook:{"branch_parent_index":0} -->

## California Housing

In this section we will play with [California Housing Data Set](https://www.kaggle.com/datasets/camnugent/california-housing-prices). The data pertains to the houses found in a given California district and some summary stats about them based on the 1990 census data. Be warned the data aren't cleaned, so there are some preprocessing steps required! The columns are as follows (their names are pretty self explanatory):

* <pre>longitude</pre>
* <pre>latitude</pre>
* <pre>housing_median_age</pre>
* <pre>total_rooms</pre>
* <pre>total_bedrooms</pre>
* <pre>population</pre>
* <pre>households</pre>
* <pre>median_income</pre>
* <pre>median_house_value</pre>
* <pre>ocean_proximity</pre>

The main task of this section is to predict the median_house_income. However, before we use our linear regression for prediction, we need to learn more about the data.

```elixir
data =
  Req.get!(
    "https://raw.githubusercontent.com/sonarsushant/California-House-Price-Prediction/master/housing.csv"
  ).body

df = Explorer.DataFrame.load_csv!(data)
```

Firstly, let's look at the distribution of houses based on the distance to the ocean.

```elixir
Explorer.DataFrame.pull(df, "ocean_proximity")
|> Explorer.Series.frequencies()
```

Now, we will plot univariate histograms for each feature of the data set.

```elixir
Vl.new(
  title: [
    text: "Univariate Histograms of all features"
  ],
  width: 500,
  height: 500,
  columns: 3
)
|> Vl.data_from_values(df)
|> Vl.concat(
  for name <- List.delete(df.names, "ocean_proximity"),
      do:
        Vl.new()
        |> Vl.mark(:bar)
        |> Vl.encode_field(:x, name, bin: [bin: true, maxbins: 50], axis: [ticks: false])
        |> Vl.encode_field(:y, "value count", aggregate: :count)
)
```

From the histograms, we can spot that *median_income* and *median_house_values* have a similar distribution. Both of them are heavy-tailed with high skewness. We might speculate that those two features are strictly correlated. We will check that later on.

Now, let's plot the distribution of houses on a scatter plot.

```elixir
Vl.new(
  title: [
    text: "Distribution of houses across California",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.data_from_values(df)
|> Vl.mark(:circle)
|> Vl.encode_field(:x, "longitude",
  type: :quantitative,
  axis: [grid: false],
  scale: [domain: [-124.55, -113.80]]
)
|> Vl.encode_field(:y, "latitude",
  type: :quantitative,
  axis: [grid: false],
  scale: [domain: [32.45, 42.05]]
)
```

This plot indeed presents the map of California. But it's hard to spot any pattern in this picture. To make it easier, change the value of the *opacity* parameter to 0.2.

```elixir
Vl.new(
  title: [
    text: "Distribution of houses across California",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.data_from_values(df)
|> Vl.mark(:circle, opacity: 0.2)
|> Vl.encode_field(:x, "longitude",
  type: :quantitative,
  axis: [grid: false],
  scale: [domain: [-124.55, -113.80]]
)
|> Vl.encode_field(:y, "latitude",
  type: :quantitative,
  axis: [grid: false],
  scale: [domain: [32.45, 42.05]]
)
```

We can see better the more dense areas of the plot. Now we will focus more on house prices. Encode them in color on the map. The size of a circle will indicate the population of districts.

```elixir
Vl.new(
  title: [
    text: "Distribution of houses across California",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.data_from_values(df)
|> Vl.mark(:circle, opacity: 0.4)
|> Vl.encode_field(:x, "longitude",
  type: :quantitative,
  axis: [grid: false],
  scale: [domain: [-124.55, -113.80]]
)
|> Vl.encode_field(:y, "latitude",
  type: :quantitative,
  axis: [grid: false],
  scale: [domain: [32.45, 42.05]]
)
|> Vl.encode_field(:color, "median_house_value", type: :quantitative, scale: [scheme: :viridis])
|> Vl.encode_field(:size, "population", type: :quantitative)
```

In the end, we may also add the map of California.

```elixir
Vl.new(
  title: [
    text: "Scatterplot of Generated Data",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.layers([
  Vl.new()
  |> Vl.data_from_values([
    %{
      url:
        "https://raw.githubusercontent.com/ageron/handson-ml2/master/images/end_to_end_project/california.png"
    }
  ])
  |> Vl.mark(:image,
    width: 630,
    aspect: false,
    align: :right
  )
  |> Vl.encode_field(:url, "url", type: :nominal),
  Vl.new()
  |> Vl.data_from_values(df)
  |> Vl.mark(:circle, opacity: 0.4)
  |> Vl.encode_field(:x, "longitude",
    type: :quantitative,
    axis: [grid: false],
    scale: [domain: [-124.55, -113.80]]
  )
  |> Vl.encode_field(:y, "latitude",
    type: :quantitative,
    axis: [grid: false],
    scale: [domain: [32.45, 42.05]]
  )
  |> Vl.encode_field(:color, "median_house_value", type: :quantitative, scale: [scheme: :viridis])
  |> Vl.encode_field(:size, "population", type: :quantitative)
])
```

From this plot, we can read that prices are substantially dependent on **geolocalization** and **population**. For geolocalization, we see that those areas closer to the ocean are more expensive. But it's not a strict rule since houses on the northern bay of California are much more affordable than in-land Mid California. For the population, there are two dense areas with expensive housing: Los Angeles Bay (In South California) and San Francisco Bay (in Mid California). They are metropoles with a lot of different tech companies, and business and cultural institutions, so, logically, housing in those places will be expensive.

<ins>
<i>
Hint:
</i>
</ins>

<br />

You can try to add another feature by computing clustering on this data set. It might be a sum or power mean of distances to the clusters. We may predict that centroids will be located in San Francisco Bay and Los Angeles Bay. You can also pass population as weights to K-means.

<!-- livebook:{"break_markdown":true} -->

Before we convert our data to tensor, we will add three more columns which might be informative:

* <pre>rooms_per_family</pre>
* <pre>bedrooms_per_rooms</pre>
* <pre>population_per_family</pre>

The names of columns are self-describing. Now, add them to our data frame.

```elixir
df =
  Explorer.DataFrame.mutate(df,
    rooms_per_family: total_rooms / households,
    bedrooms_per_rooms: total_bedrooms / total_rooms,
    population_per_family: population / households
  )
```

In the next step, we will find the correlation matrix. But to do this, we need to cast our data frame to an Nx tensor and split data into train and test sets.

```elixir
# Module to convert Explorer data frames into tensors.
defmodule ToTensor do
  def df_to_matrix(df) do
    df
    |> Explorer.DataFrame.names()
    |> Enum.map(&Explorer.Series.to_tensor(df[&1]))
    |> Nx.stack(axis: 1)
  end
end
```

```elixir
# Replace all nils with :nan so we are able to convert to tensor.
names =
  df
  |> Explorer.DataFrame.names()
  |> List.delete("ocean_proximity")

after_preprocessing =
  for name <- names, into: %{}, do: {name, Explorer.Series.fill_missing(df[name], :nan)}

preprocessed_data = Explorer.DataFrame.new(after_preprocessing)

# Map ocean_proximity from categorical to float
# We can consider this categorical as ordinal data since we can order them by the distance
# to the ocean. The bigger value the further from the ocean.
mapping = %{
  "ISLAND" => 0.0,
  "<1H OCEAN" => 1.0,
  "NEAR OCEAN" => 2.0,
  "NEAR BAY" => 3.0,
  "INLAND" => 4.0
}

mapped_location =
  Explorer.Series.transform(df["ocean_proximity"], fn x -> Map.fetch!(mapping, x) end)

df = Explorer.DataFrame.put(preprocessed_data, :ocean_proximity, mapped_location)
```

```elixir
# Shuffle data to make splitting more resonable
{num_rows, _num_cols} = Explorer.DataFrame.shape(df)
permutation_indices = Nx.iota({num_rows}) |> Nx.shuffle(axis: 0)

y =
  df[["median_house_value"]]
  |> ToTensor.df_to_matrix()
  |> Nx.take(permutation_indices)
  |> Nx.squeeze()

x =
  df
  |> Explorer.DataFrame.discard(["median_house_value"])
  |> ToTensor.df_to_matrix()
  |> Nx.take(permutation_indices)

{x, y}
```

Since we don't have a stratified spilt of data implemented (to learn more see [Stratified Sampling](https://en.wikipedia.org/wiki/Stratified_sampling)), we shuffle data set and take advantage of [Law of large numbers](https://en.wikipedia.org/wiki/Law_of_large_numbers). Now, we will split the data into training and test sets.

```elixir
train_ratio = 0.8
num_train = round(train_ratio * num_rows)

{x_train, x_test} = {x[[0..(num_train - 1), 0..-1//1]], x[[num_train..(num_rows - 1), 0..-1//1]]}
{y_train, y_test} = {y[[0..(num_train - 1)]], y[[num_train..(num_rows - 1)]]}
```

Before we compute the correlation matrix, we will check if we have NaNs (Not a Number) in the data set.

```elixir
y_nan_count = Nx.sum(Nx.is_nan(y))
x_nan_count = Nx.sum(Nx.is_nan(x))
{x_nan_count, y_nan_count}
```

Oops, we have some! Fortunately, for y we don't have any NaNs. If we dig a little bit more, it turns out that NaNs are in <pre> bedrooms_per_rooms (1st row) </pre>  <pre> total_bedrooms (10th row) </pre>

```elixir
{bedrooms_per_rooms_idx, total_bedrooms_idx} = {0, 9}
bedrooms_per_rooms_nan_count = Nx.sum(Nx.is_nan(x[[0..-1//1, bedrooms_per_rooms_idx]]))
total_bedrooms_nan_count = Nx.sum(Nx.is_nan(x[[0..-1//1, total_bedrooms_idx]]))
Nx.equal(x_nan_count, Nx.add(bedrooms_per_rooms_nan_count, total_bedrooms_nan_count))
```

For these two, we use `Scholar.Impute.SimpleImputer` with strategy set to median of values. The `fit` function learns the median of features and `transform` with the trained model replaces all NaNs with a given strategy. It is important that we perform imputation after splitting data because otherwise we will have a leakage of information from test data.

```elixir
x_train =
  x_train
  |> Scholar.Impute.SimpleImputer.fit(strategy: :median)
  |> Scholar.Impute.SimpleImputer.transform(x_train)

x_test =
  x_test
  |> Scholar.Impute.SimpleImputer.fit(strategy: :median)
  |> Scholar.Impute.SimpleImputer.transform(x_test)
```

Eventually, we can compute the correlation matrix. We will use `Scholar.Covariance` to calculate the correlation matrix.

```elixir
defmodule Correlation do
  import Nx.Defn

  defn correlation_matrix_n(x, opts \\ []) do
    variances =
      if opts[:biased] do
        Nx.variance(x, axes: [0])
      else
        Nx.variance(x, axes: [0], ddof: 1)
      end

    Scholar.Covariance.covariance_matrix(x, opts) /
      Nx.sqrt(Nx.new_axis(variances, 1) * Nx.new_axis(Nx.transpose(variances), 0))
  end
end
```

```elixir
correlation =
  Nx.concatenate([x_train, Nx.new_axis(y_train, 1)], axis: 1)
  |> Correlation.correlation_matrix_n(biased: true)
```

Maybe a visual representation would be nicer. 😅

```elixir
{corr_size, _} = Nx.shape(correlation)
correlation_list = Nx.to_flat_list(correlation)

names = [
  "Bedrooms per rooms",
  "Households",
  "Housing median age",
  "Latitude",
  "Longitude",
  "Median income",
  "Population",
  "Population per family",
  "Rooms per family",
  "Total bedrooms",
  "Total rooms",
  "Ocean proximity",
  "Median house value"
]

corr_to_plot =
  Explorer.DataFrame.new(
    x: List.flatten(List.duplicate(names, corr_size)),
    y: List.flatten(for name <- names, do: List.duplicate(name, corr_size)),
    corr_val: correlation_list
  )

Vl.new(
  title: [
    text: "Correlation Matrix for California Housing",
    offset: 20
  ],
  width: 630,
  height: 630
)
|> Vl.data_from_values(corr_to_plot)
|> Vl.mark(:rect)
|> Vl.encode_field(:x, "x", type: :nominal, title: "")
|> Vl.encode_field(:y, "y", type: :nominal, title: "")
|> Vl.encode_field(:color, "corr_val", type: :quantitative, scale: [scheme: :viridis])
|> Vl.config(axis: [grid: true, tickband: :extent])
```

We can spot that _median_house_value_ is strongly correlated with _median_income_. It's pretty straightforward, the more money you have, the more expensive house you can buy. Non-obvious is a negative correlation with _bedrooms_per_rooms_. But it also can be explained. Bedrooms are the most crucial rooms in the house. Firstly, you need to guarantee that you have a house with enough bedrooms. If this condition is satisfied, then you can focus on "additional rooms" like a chill room, cabinets and so on. So if you buy a house with more additional rooms, then you decrease the ratio.

<!-- livebook:{"break_markdown":true} -->

Now we are ready to train a model for the _median_house_value_ prediction. We will use linear regression. In the first step, we create the model by calling the `fit` function.

```elixir
model = Scholar.Linear.LinearRegression.fit(x_train, y_train)
```

Now we can predict the values for the test set and measure the error of our prediction. We will calculate root mean square error (RMSE) and mean absolute error (MAE).

```elixir
defmodule RMSE do
  import Nx.Defn

  defn root_mean_square_error(y_true, y_pred) do
    diff = y_true - y_pred
    (diff * diff) |> Nx.mean() |> Nx.sqrt()
  end
end
```

```elixir
predictions = Scholar.Linear.LinearRegression.predict(model, x_test)
rmse = RMSE.root_mean_square_error(y_test, predictions)
mae = Scholar.Metrics.mean_absolute_error(y_test, predictions)
{rmse, mae}
```

Ok, but is it a good or poor estimation? Huh, check the mean value of the target and then compare it to the value of errors.

```elixir
Nx.mean(y)
```

For such a simple model as linear regression, it seems to be a pretty good result. But there is space to improve this result. You can, for example, add some additional features like the logarithm of the population. In the future, you will be able to try more complicated models, such as random forests.
