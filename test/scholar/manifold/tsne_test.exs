defmodule Scholar.Manifold.TSNETest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.TSNE
  doctest TSNE

  @seed 42
  @x Nx.tensor([
       [
         -8.73180761,
         -17.31599354,
         -10.76061306,
         44.89164949,
         3.12358324,
         -12.12349236
       ],
       [
         7.64626495,
         18.55374334,
         3.87725984,
         -6.99299854,
         -9.36734843,
         4.55923917
       ],
       [
         20.09781323,
         8.68550196,
         8.43256455,
         -19.15829538,
         31.40440792,
         6.06427556
       ],
       [
         10.63844377,
         12.75106034,
         1.43716746,
         22.80253916,
         -30.5268915,
         9.39948666
       ],
       [
         4.86846911,
         -28.12055241,
         -6.08674611,
         17.03477114,
         6.65227597,
         -32.9099819
       ],
       [
         -6.85085101,
         -16.87612764,
         -11.54632153,
         -51.06982144,
         -6.74068325,
         8.01699475
       ],
       [
         5.54656739,
         38.3957026,
         24.36609113,
         6.97242576,
         30.16740117,
         -28.33044809
       ],
       [
         -9.46902188,
         -28.02162129,
         37.34167044,
         -5.5330473,
         2.98759518,
         -19.68337166
       ],
       [
         8.7946142,
         0.15558464,
         0.47478064,
         26.20112788,
         47.17380434,
         19.2504862
       ],
       [
         -9.549788,
         7.08735882,
         30.68402683,
         31.23933105,
         4.33932039,
         11.94982724
       ]
     ])

  @x_wide Nx.tensor([[1, 2, 3, 1], [2, 56, 2, 4]])

  test "all default params" do
    embedding = TSNE.fit(@x, seed: @seed)

    expected =
      Nx.tensor([
        [-48.394927978515625, 66.50021362304688],
        [7.8231730461120605, 10.989039421081543],
        [4.684918403625488, 6.815146446228027],
        [27.315383911132812, -6.1385087966918945],
        [-25.089069366455078, -143.1427001953125],
        [9.048757553100586, 16.086631774902344],
        [-6.820103645324707, -12.160531997680664],
        [2.8211355209350586, 2.789545774459839],
        [-7.3010053634643555, -2.3209228515625],
        [35.911705017089844, 60.582584381103516]
      ])

    assert_all_close(embedding, expected)
  end

  test "test for wide matrix" do
    embedding = TSNE.fit(@x_wide, seed: @seed)

    expected =
      Nx.tensor([
        [4324.59228515625, 0.0],
        [-4324.59228515625, 0.0]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default num_components" do
    embedding = TSNE.fit(@x, num_components: 3, seed: @seed)

    expected =
      Nx.tensor([
        [48.458805084228516, 20.926639556884766, 23.328176498413086],
        [1.3861017227172852, 1.7699435949325562, -2.676140069961548],
        [-51.60422897338867, -28.629364013671875, -9.703720092773438],
        [3.546139717102051, 8.81450080871582, -0.8542752265930176],
        [-0.780931830406189, 4.931651592254639, 2.0672311782836914],
        [-9.879473686218262, 14.463763236999512, -4.986937522888184],
        [13.81613540649414, -13.155033111572266, 2.558547019958496],
        [-2.2968332767486572, -7.366013526916504, -7.307615280151367],
        [1.329331874847412, -2.9232888221740723, -2.741940975189209],
        [-3.974930763244629, 1.1675262451171875, 0.3169090747833252]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default perplexity" do
    embedding = TSNE.fit(@x, perplexity: 5, seed: @seed)

    expected =
      Nx.tensor([
        [80.12378692626953, -36.33955383300781],
        [28.59857177734375, -17.331403732299805],
        [168.4032745361328, -55.193359375],
        [78.66170501708984, -38.008750915527344],
        [-70.58161163330078, 22.732351303100586],
        [-88.12931060791016, 69.2691650390625],
        [-85.61357116699219, 21.240266799926758],
        [-59.18068313598633, 21.583553314208984],
        [-145.75128173828125, 42.13447189331055],
        [93.4686508178711, -30.086502075195312]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default learning_rate" do
    embedding = TSNE.fit(@x, learning_rate: 100, seed: @seed)

    expected =
      Nx.tensor([
        [-4.164182662963867, -7.327198028564453],
        [-3.6898019313812256, 2.4984254837036133],
        [0.8115530014038086, -0.36371690034866333],
        [-0.061314284801483154, 9.16086483001709],
        [4.708583831787109, -1.9685125350952148],
        [-7.233410835266113, -2.0217514038085938],
        [2.4825563430786133, 1.3747981786727905],
        [0.9261454343795776, -1.170154333114624],
        [2.4096527099609375, -12.121339797973633],
        [3.810344696044922, 11.938451766967773]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default max_iter" do
    embedding = TSNE.fit(@x, num_iters: 333, seed: @seed)

    expected =
      Nx.tensor([
        [29.758529663085938, -44.404640197753906],
        [-18.55759048461914, -25.81207275390625],
        [12.346041679382324, -36.88735580444336],
        [114.81597900390625, -43.44415283203125],
        [26.905071258544922, -29.450336456298828],
        [-96.47888946533203, -11.951689720153809],
        [2.6258840560913086, -29.7844181060791],
        [-98.3608169555664, 132.16404724121094],
        [13.657164573669434, 129.0576934814453],
        [13.28868293762207, -39.48658752441406]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default init" do
    embedding = TSNE.fit(@x, init: :random, seed: @seed)

    expected =
      Nx.tensor([
        [11.895841598510742, -16.399948120117188],
        [23.96310043334961, -20.192819595336914],
        [139.05288696289062, -64.61959838867188],
        [10.42809009552002, -25.98411750793457],
        [14.136453628540039, 4.297189712524414],
        [-5.043922424316406, 102.03876495361328],
        [-2.542982339859009, -61.87345886230469],
        [-177.80848693847656, 11.263525009155273],
        [4.459288597106934, -24.146390914916992],
        [-18.539642333984375, 95.6163558959961]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default metric" do
    embedding = TSNE.fit(@x, seed: @seed, metric: :chebyshev)

    expected =
      Nx.tensor([
        [26.449310302734375, 33.13703155517578],
        [88.6688232421875, 86.01327514648438],
        [5.8950653076171875, 12.866806030273438],
        [30.62552833557129, 8.562135696411133],
        [-57.04432678222656, -68.57598876953125],
        [25.440921783447266, 22.359386444091797],
        [-94.12852478027344, -70.9065933227539],
        [-48.744510650634766, -49.664398193359375],
        [76.02581787109375, 90.09138488769531],
        [-53.18706512451172, -63.886043548583984]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default exaggeration" do
    embedding = TSNE.fit(@x, seed: 42, exaggeration: 4.5)

    expected =
      Nx.tensor([
        [-0.36976122856140137, -1.968430995941162],
        [2.6865992546081543, -5.352686882019043],
        [2.088754177093506, -6.283694744110107],
        [-134.71804809570312, 64.10062408447266],
        [-5.170080184936523, -8.624532699584961],
        [70.7222900390625, 26.307558059692383],
        [-5.551893711090088, -11.498445510864258],
        [14.138738632202148, 5.38366174697876],
        [5.617127418518066, 65.37567138671875],
        [50.55517578125, -127.43892669677734]
      ])

    assert_all_close(embedding, expected)
  end
end
