defmodule Scholar.Manifold.TSNETest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.TSNE
  doctest TSNE

  defp key do
    Nx.Random.key(42)
  end

  defp x do
    Nx.tensor([
      [
        -8.73180761,
        -17.31599354,
        -10.76061306,
        44.89164949,
        3.12358324,
        -12.12349236
      ],
      [
        7.64626495,
        18.55374334,
        3.87725984,
        -6.99299854,
        -9.36734843,
        4.55923917
      ],
      [
        20.09781323,
        8.68550196,
        8.43256455,
        -19.15829538,
        31.40440792,
        6.06427556
      ],
      [
        10.63844377,
        12.75106034,
        1.43716746,
        22.80253916,
        -30.5268915,
        9.39948666
      ],
      [
        4.86846911,
        -28.12055241,
        -6.08674611,
        17.03477114,
        6.65227597,
        -32.9099819
      ],
      [
        -6.85085101,
        -16.87612764,
        -11.54632153,
        -51.06982144,
        -6.74068325,
        8.01699475
      ],
      [
        5.54656739,
        38.3957026,
        24.36609113,
        6.97242576,
        30.16740117,
        -28.33044809
      ],
      [
        -9.46902188,
        -28.02162129,
        37.34167044,
        -5.5330473,
        2.98759518,
        -19.68337166
      ],
      [
        8.7946142,
        0.15558464,
        0.47478064,
        26.20112788,
        47.17380434,
        19.2504862
      ],
      [
        -9.549788,
        7.08735882,
        30.68402683,
        31.23933105,
        4.33932039,
        11.94982724
      ]
    ])
  end

  defp x_wide do
    Nx.tensor([[1, 2, 3, 1], [2, 56, 2, 4]])
  end

  test "all default params" do
    embedding = TSNE.fit(x(), key: key())

    expected =
      Nx.tensor([
        [-40.56040954589844, -68.16744995117188],
        [4.963836669921875, 15.062470436096191],
        [52.409217834472656, 62.55381393432617],
        [3.6575255393981934, -21.331544876098633],
        [1.9406723976135254, 9.503897666931152],
        [50.68553161621094, 97.37788391113281],
        [12.861334800720215, -5.144858360290527],
        [-0.08688473701477051, 11.097810745239258],
        [-16.302968978881836, 4.448402404785156],
        [-69.56835174560547, -105.40238189697266]
      ])

    assert_all_close(embedding, expected)
  end

  test "test for wide matrix" do
    embedding = TSNE.fit(x_wide(), key: key())

    expected =
      Nx.tensor([
        [3679.796875, 0.0],
        [-3679.796875, 0.0]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default num_components" do
    embedding = TSNE.fit(x(), num_components: 3, key: key())

    expected =
      Nx.tensor([
        [-0.720294713973999, 7.20734977722168, -6.391678810119629],
        [-7.667532444000244, 3.2291605472564697, 9.317089080810547],
        [-0.24787211418151855, -2.148440361022949, -3.8253002166748047],
        [2.0674548149108887, 5.781192779541016, 5.811742782592773],
        [28.587512969970703, -37.42428207397461, -90.23539733886719],
        [-17.36945152282715, 17.298032760620117, 71.87922668457031],
        [1.9807157516479492, -1.1625878810882568, 7.809732437133789],
        [-1.256453275680542, 3.8095149993896484, 2.0424277782440186],
        [-0.840096116065979, 3.5864388942718506, 6.742667198181152],
        [-4.535242557525635, -0.17502427101135254, -3.1499686241149902]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default perplexity" do
    embedding = TSNE.fit(x(), perplexity: 5, key: key())

    expected =
      Nx.tensor([
        [-9.334256172180176, 69.1719741821289],
        [12.588174819946289, -16.575504302978516],
        [35.39522933959961, 56.1950798034668],
        [-31.067523956298828, 178.23777770996094],
        [-134.37229919433594, -197.263671875],
        [-58.42694854736328, -212.14434814453125],
        [26.330211639404297, 16.41795539855957],
        [124.88433074951172, -55.47932052612305],
        [43.05698776245117, -13.188211441040039],
        [-9.053865432739258, 174.62806701660156]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default learning_rate" do
    embedding = TSNE.fit(x(), learning_rate: 100, key: key())

    expected =
      Nx.tensor([
        [-1.5070298910140991, 1.7770516872406006],
        [1.0464317798614502, 6.572760581970215],
        [3.0646090507507324, 0.7151472568511963],
        [-3.227736234664917, 0.7268509268760681],
        [2.950016498565674, 2.1362667083740234],
        [-2.0649163722991943, 1.4648656845092773],
        [-0.26644080877304077, 0.9178383946418762],
        [0.7323529720306396, -13.481656074523926],
        [1.5609462261199951, -0.4036065340042114],
        [-2.288417100906372, -0.4257314205169678]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default max_iter" do
    embedding = TSNE.fit(x(), num_iters: 333, key: key())

    expected =
      Nx.tensor([
        [24.384241104125977, 9.98823070526123],
        [9.558063507080078, 8.126869201660156],
        [-86.89659881591797, -21.715559005737305],
        [-1.2773358821868896, -6.753499984741211],
        [-5.65122127532959, -13.650869369506836],
        [0.5404881238937378, -24.523698806762695],
        [2.29805064201355, -14.350067138671875],
        [-10.488426208496094, -19.941368103027344],
        [123.80097961425781, 99.55735778808594],
        [-56.26921463012695, -16.739578247070312]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default init" do
    embedding = TSNE.fit(x(), init: :random, key: key())

    expected =
      Nx.tensor([
        [17.54478645324707, -4.611420631408691],
        [12.03654670715332, 4.872840881347656],
        [6.249638080596924, -1.6746138334274292],
        [94.60688018798828, 55.435829162597656],
        [10.510167121887207, 4.246967315673828],
        [19.59783935546875, 0.7140516638755798],
        [-56.172481536865234, -14.603594779968262],
        [-3.935652256011963, -2.9040825366973877],
        [-116.89958953857422, -42.6511116027832],
        [16.4613094329834, 1.176856517791748]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default metric" do
    embedding = TSNE.fit(x(), key: key(), metric: :chebyshev)

    expected =
      Nx.tensor([
        [2.604278087615967, -100.68524932861328],
        [5.846366882324219, -53.27583312988281],
        [8.562166213989258, -38.018890380859375],
        [18.852039337158203, 13.029205322265625],
        [19.86124038696289, 22.388168334960938],
        [-33.23206329345703, 18.488771438598633],
        [-13.544496536254883, 53.925811767578125],
        [-1.1907639503479004, 42.48714065551758],
        [-5.692774772644043, 22.050697326660156],
        [-2.0605876445770264, 19.605968475341797]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default exaggeration" do
    embedding = TSNE.fit(x(), key: key(), exaggeration: 4.5)

    expected =
      Nx.tensor([
        [-67.28031921386719, -6.817644119262695],
        [-16.588186264038086, 93.91526794433594],
        [14.03242015838623, -4.765425205230713],
        [-20.412851333618164, 7.198407173156738],
        [6.30552864074707, -16.696596145629883],
        [36.38324737548828, -9.629066467285156],
        [-26.198514938354492, -6.854467391967773],
        [92.41073608398438, -39.33834457397461],
        [9.657635688781738, -9.092098236083984],
        [-28.308706283569336, -7.919832706451416]
      ])

    assert_all_close(embedding, expected)
  end
end
