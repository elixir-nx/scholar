defmodule Scholar.Manifold.TSNETest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.TSNE
  doctest TSNE

  @seed 42
  @x Nx.tensor([
       [
         -8.73180761,
         -17.31599354,
         -10.76061306,
         44.89164949,
         3.12358324,
         -12.12349236
       ],
       [
         7.64626495,
         18.55374334,
         3.87725984,
         -6.99299854,
         -9.36734843,
         4.55923917
       ],
       [
         20.09781323,
         8.68550196,
         8.43256455,
         -19.15829538,
         31.40440792,
         6.06427556
       ],
       [
         10.63844377,
         12.75106034,
         1.43716746,
         22.80253916,
         -30.5268915,
         9.39948666
       ],
       [
         4.86846911,
         -28.12055241,
         -6.08674611,
         17.03477114,
         6.65227597,
         -32.9099819
       ],
       [
         -6.85085101,
         -16.87612764,
         -11.54632153,
         -51.06982144,
         -6.74068325,
         8.01699475
       ],
       [
         5.54656739,
         38.3957026,
         24.36609113,
         6.97242576,
         30.16740117,
         -28.33044809
       ],
       [
         -9.46902188,
         -28.02162129,
         37.34167044,
         -5.5330473,
         2.98759518,
         -19.68337166
       ],
       [
         8.7946142,
         0.15558464,
         0.47478064,
         26.20112788,
         47.17380434,
         19.2504862
       ],
       [
         -9.549788,
         7.08735882,
         30.68402683,
         31.23933105,
         4.33932039,
         11.94982724
       ]
     ])

  @x_wide Nx.tensor([[1, 2, 3, 1], [2, 56, 2, 4]])

  test "all default params" do
    embedding = TSNE.fit(@x, seed: @seed)

    expected =
      Nx.tensor([
        [164.65414428710938, 337.39959716796875],
        [-224.5696563720703, 145.33778381347656],
        [-554.1491088867188, 247.2036590576172],
        [450.6042175292969, 112.85472869873047],
        [349.021240234375, -212.15921020507812],
        [-325.5739440917969, -194.71189880371094],
        [287.6287536621094, -559.1441040039062],
        [56.036983489990234, -10.554374694824219],
        [-178.2862091064453, 501.1224365234375],
        [-25.368061065673828, -367.34710693359375]
      ])

    assert embedding == expected
  end

  test "test for wide matrix" do
    embedding = TSNE.fit(@x_wide, seed: @seed)

    expected =
      Nx.tensor([
        [14892.95703125, 0.0],
        [-14892.95703125, 0.0]
      ])

    assert embedding == expected
  end

  test "non-default num_components" do
    embedding = TSNE.fit(@x, num_components: 3, seed: @seed)

    expected =
      Nx.tensor([
        [-19.649642944335938, 63.84522247314453, 68.26558685302734],
        [66.19884490966797, 26.02121925354004, -50.24291229248047],
        [-18.999860763549805, -32.968997955322266, 78.68360900878906],
        [67.45196533203125, 30.587963104248047, 45.51057052612305],
        [-7.116581439971924, 83.5901870727539, -25.33772087097168],
        [-84.77093505859375, 17.12874412536621, 10.496780395507812],
        [28.751054763793945, -60.57818603515625, -67.98020935058594],
        [56.177459716796875, -62.674285888671875, 24.33760643005371],
        [-47.60099792480469, -72.68278503417969, -6.720518589019775],
        [-40.44109344482422, 7.730358123779297, -77.01309967041016]
      ])

    assert embedding == expected
  end

  test "non-default perplexity" do
    embedding = TSNE.fit(@x, perplexity: 5, seed: @seed)

    expected =
      Nx.tensor([
        [-408.35162353515625, -55.18301010131836],
        [189.0811004638672, 289.2778625488281],
        [-886.6240234375, -923.1098022460938],
        [-133.73402404785156, 248.6715850830078],
        [-122.04425811767578, -194.23622131347656],
        [-15.176532745361328, 673.1609497070312],
        [294.3622741699219, -499.4531555175781],
        [-245.2960205078125, -531.7301025390625],
        [970.492919921875, 1046.2496337890625],
        [357.2986145019531, -53.64104080200195]
      ])

    assert embedding == expected
  end

  test "non-default learning_rate" do
    embedding = TSNE.fit(@x, learning_rate: 100, seed: @seed)

    expected =
      Nx.tensor([
        [-58.29507827758789, 154.0665283203125],
        [67.54705047607422, -68.2519760131836],
        [156.44906616210938, 33.48025131225586],
        [79.38033294677734, 150.8470458984375],
        [176.0793914794922, -147.0850372314453],
        [-151.06222534179688, 7.348621845245361],
        [-8.584115028381348, 29.669939041137695],
        [-197.2758331298828, 140.3000946044922],
        [-79.50741577148438, -100.52456665039062],
        [15.2693510055542, -199.85218811035156]
      ])

    assert embedding == expected
  end

  test "non-default max_iter" do
    embedding = TSNE.fit(@x, num_iters: 333, seed: @seed)

    expected =
      Nx.tensor([
        [188.66702270507812, 260.5035705566406],
        [-260.84893798828125, 176.11788940429688],
        [-569.3421020507812, 300.5531921386719],
        [425.6060485839844, 52.95838165283203],
        [364.1392822265625, -236.95343017578125],
        [-237.4346160888672, -164.7920684814453],
        [313.0722351074219, -553.0750732421875],
        [5.049628257751465, 31.937437057495117],
        [-249.32550048828125, 497.7811584472656],
        [20.413894653320312, -365.0316467285156]
      ])

    assert embedding == expected
  end

  test "non-default init" do
    embedding = TSNE.fit(@x, init: :random, seed: @seed)

    expected =
      Nx.tensor([
        [-117.2147445678711, 2287.299560546875],
        [-1670.095947265625, 1904.0675048828125],
        [-1106.87158203125, -2201.6474609375],
        [-296.3346252441406, -712.468017578125],
        [937.283447265625, -936.7159423828125],
        [-664.4600219726562, 305.16656494140625],
        [307.30157470703125, 197.93606567382812],
        [-1256.3563232421875, -493.5205993652344],
        [1164.4962158203125, -15.88142204284668],
        [2702.239013671875, -334.2357482910156]
      ])

    assert embedding == expected
  end

  test "non-default metric" do
    embedding = TSNE.fit(@x, seed: @seed, metric: :chebyshev)

    expected =
      Nx.tensor([
        [327.787353515625, -356.4135437011719],
        [-359.0345458984375, 423.8564147949219],
        [196.16102600097656, 589.689208984375],
        [143.6734161376953, 186.10203552246094],
        [-702.6492309570312, -185.35655212402344],
        [1100.1962890625, -80.61613464355469],
        [97.96436309814453, 429.386474609375],
        [141.3024139404297, -335.5622863769531],
        [-511.5255126953125, 5.712872505187988],
        [-433.89642333984375, -676.79638671875]
      ])

    assert embedding == expected
  end

  test "non-default exaggeration" do
    embedding = TSNE.fit(@x, seed: 42, exaggeration: 4.5)

    expected =
      Nx.tensor([
        [182.5236053466797, 88.53589630126953],
        [-181.26303100585938, 62.730255126953125],
        [-64.1055679321289, -181.2238311767578],
        [63.83070373535156, 181.4840850830078],
        [-182.8459930419922, -87.99281311035156],
        [-55.95290756225586, -27.565671920776367],
        [-61.267704010009766, 127.22525787353516],
        [56.05404281616211, 27.10344123840332],
        [61.7658805847168, -128.1149444580078],
        [181.2608184814453, -62.18128204345703]
      ])

    assert embedding == expected
  end
end
