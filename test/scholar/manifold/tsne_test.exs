defmodule Scholar.Manifold.TSNETest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.TSNE
  doctest TSNE

  @seed 42
  @x Nx.tensor([
       [
         -8.73180761,
         -17.31599354,
         -10.76061306,
         44.89164949,
         3.12358324,
         -12.12349236
       ],
       [
         7.64626495,
         18.55374334,
         3.87725984,
         -6.99299854,
         -9.36734843,
         4.55923917
       ],
       [
         20.09781323,
         8.68550196,
         8.43256455,
         -19.15829538,
         31.40440792,
         6.06427556
       ],
       [
         10.63844377,
         12.75106034,
         1.43716746,
         22.80253916,
         -30.5268915,
         9.39948666
       ],
       [
         4.86846911,
         -28.12055241,
         -6.08674611,
         17.03477114,
         6.65227597,
         -32.9099819
       ],
       [
         -6.85085101,
         -16.87612764,
         -11.54632153,
         -51.06982144,
         -6.74068325,
         8.01699475
       ],
       [
         5.54656739,
         38.3957026,
         24.36609113,
         6.97242576,
         30.16740117,
         -28.33044809
       ],
       [
         -9.46902188,
         -28.02162129,
         37.34167044,
         -5.5330473,
         2.98759518,
         -19.68337166
       ],
       [
         8.7946142,
         0.15558464,
         0.47478064,
         26.20112788,
         47.17380434,
         19.2504862
       ],
       [
         -9.549788,
         7.08735882,
         30.68402683,
         31.23933105,
         4.33932039,
         11.94982724
       ]
     ])

  @x_wide Nx.tensor([[1, 2, 3, 1], [2, 56, 2, 4]])

  test "all default params" do
    embedding = TSNE.fit(@x, seed: @seed)

    expected =
      Nx.tensor([
        [4.33560848236084, -3.415844678878784],
        [-0.5424690246582031, -0.5743043422698975],
        [0.9487913846969604, 11.514239311218262],
        [2.3694353103637695, -6.964484214782715],
        [-5.296186447143555, -0.058452606201171875],
        [-24.591899871826172, 31.212093353271484],
        [-2.9956955909729004, 6.522835731506348],
        [2.999080181121826, -7.8269500732421875],
        [-0.7246303558349609, -2.788698196411133],
        [23.49790382385254, -27.62047576904297]
      ])

    assert_all_close(embedding, expected)
  end

  test "test for wide matrix" do
    embedding = TSNE.fit(@x_wide, seed: @seed)

    expected =
      Nx.tensor([
        [889.4932250976562, 0.0],
        [-889.4932250976562, 0.0]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default num_components" do
    embedding = TSNE.fit(@x, num_components: 3, seed: @seed)

    expected =
      Nx.tensor([
        [-8.444135665893555, -0.4086116552352905, -1.3863803148269653],
        [2.84027099609375, -7.217253684997559, 2.4738738536834717],
        [8.93855094909668, 2.8540751934051514, -3.7507925033569336],
        [-3.1324453353881836, -1.5480129718780518, -6.712747097015381],
        [0.4961581230163574, -6.104018211364746, -0.923592209815979],
        [-4.74775505065918, 5.725277423858643, 6.193069934844971],
        [1.0653588771820068, 3.2751665115356445, -0.7883353233337402],
        [1.380483627319336, -0.9004311561584473, 2.7840023040771484],
        [4.009986877441406, 3.8035888671875, 6.36311674118042],
        [-2.4065651893615723, 0.5201931595802307, -4.252168655395508]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default perplexity" do
    embedding = TSNE.fit(@x, perplexity: 5, seed: @seed)

    expected =
      Nx.tensor([
        [11.17225456237793, -4.884721755981445],
        [-10.254711151123047, 7.70491886138916],
        [7.513565540313721, 4.056244850158691],
        [-16.99369239807129, 5.970194339752197],
        [6.4710283279418945, -0.20584392547607422],
        [2.779025077819824, -7.172375679016113],
        [0.5269694328308105, -5.504964351654053],
        [26.505516052246094, -17.33206558227539],
        [-12.107376098632812, 18.837890625],
        [-15.612506866455078, -1.4693223237991333]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default learning_rate" do
    embedding = TSNE.fit(@x, learning_rate: 100, seed: @seed)

    expected =
      Nx.tensor([
        [4.6237030029296875, -1.8248512744903564],
        [0.2524220943450928, -0.4983229637145996],
        [0.0887448787689209, -0.18889814615249634],
        [-1.4166581630706787, -2.233072519302368],
        [-1.1783355474472046, -0.8974244594573975],
        [0.583494246006012, 3.7621216773986816],
        [0.8400182723999023, -0.767672061920166],
        [-0.8420439958572388, -0.4667353630065918],
        [0.08787310123443604, 0.757347583770752],
        [-3.039248466491699, 2.357537269592285]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default max_iter" do
    embedding = TSNE.fit(@x, num_iters: 333, seed: @seed)

    expected =
      Nx.tensor([
        [-0.46249330043792725, -3.0733537673950195],
        [-1.5789823532104492, -1.685915231704712],
        [1.2933048009872437, 2.434981107711792],
        [1.0992991924285889, -1.474836826324463],
        [-17.598461151123047, 14.792741775512695],
        [3.0383782386779785, -3.7899160385131836],
        [2.3142805099487305, 0.270860493183136],
        [0.41693639755249023, 1.1091995239257812],
        [-1.5038905143737793, -1.4229919910430908],
        [12.981579780578613, -7.16082763671875]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default init" do
    embedding = TSNE.fit(@x, init: :random, seed: @seed)

    expected =
      Nx.tensor([
        [40.614471435546875, -17.787555694580078],
        [-22.796104431152344, 21.13018226623535],
        [-16.8885440826416, 40.33298110961914],
        [-4.284955978393555, 1.9107513427734375],
        [11.865604400634766, -18.452524185180664],
        [-3.9675464630126953, 5.880950450897217],
        [35.83058547973633, -26.341197967529297],
        [-39.517234802246094, -7.787197589874268],
        [5.630992412567139, -0.826103925704956],
        [-6.48723840713501, 1.9400458335876465]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default metric" do
    embedding = TSNE.fit(@x, seed: @seed, metric: :chebyshev)

    expected =
      Nx.tensor([
        [35.140594482421875, -3.95058012008667],
        [52.028907775878906, 55.371376037597656],
        [47.73529052734375, -59.51603698730469],
        [-52.02903747558594, -55.371360778808594],
        [-2.572821617126465, -76.87504577636719],
        [-35.140716552734375, 3.950566291809082],
        [2.5726819038391113, 76.87505340576172],
        [79.6314468383789, -2.108250141143799],
        [-47.73542022705078, 59.51604461669922],
        [-79.63157653808594, 2.108278274536133]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default exaggeration" do
    embedding = TSNE.fit(@x, seed: 42, exaggeration: 4.5)

    expected =
      Nx.tensor([
        [3.6562235355377197, -7.231075286865234],
        [8.975723266601562, 3.146364212036133],
        [11.609891891479492, 32.559452056884766],
        [-20.100351333618164, -28.197439193725586],
        [11.807596206665039, -23.335683822631836],
        [11.772954940795898, 32.62554168701172],
        [-4.465678691864014, 8.435563087463379],
        [-35.06673049926758, 12.165842056274414],
        [5.415095329284668, -19.38106346130371],
        [6.395367622375488, -10.787334442138672]
      ])

    assert_all_close(embedding, expected)
  end
end
