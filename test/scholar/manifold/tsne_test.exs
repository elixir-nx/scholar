defmodule Scholar.Manifold.TSNETest do
  use Scholar.Case, async: true
  alias Scholar.Manifold.TSNE
  doctest TSNE

  defp key do
    Nx.Random.key(42)
  end

  defp x do
    Nx.tensor([
      [
        -8.73180761,
        -17.31599354,
        -10.76061306,
        44.89164949,
        3.12358324,
        -12.12349236
      ],
      [
        7.64626495,
        18.55374334,
        3.87725984,
        -6.99299854,
        -9.36734843,
        4.55923917
      ],
      [
        20.09781323,
        8.68550196,
        8.43256455,
        -19.15829538,
        31.40440792,
        6.06427556
      ],
      [
        10.63844377,
        12.75106034,
        1.43716746,
        22.80253916,
        -30.5268915,
        9.39948666
      ],
      [
        4.86846911,
        -28.12055241,
        -6.08674611,
        17.03477114,
        6.65227597,
        -32.9099819
      ],
      [
        -6.85085101,
        -16.87612764,
        -11.54632153,
        -51.06982144,
        -6.74068325,
        8.01699475
      ],
      [
        5.54656739,
        38.3957026,
        24.36609113,
        6.97242576,
        30.16740117,
        -28.33044809
      ],
      [
        -9.46902188,
        -28.02162129,
        37.34167044,
        -5.5330473,
        2.98759518,
        -19.68337166
      ],
      [
        8.7946142,
        0.15558464,
        0.47478064,
        26.20112788,
        47.17380434,
        19.2504862
      ],
      [
        -9.549788,
        7.08735882,
        30.68402683,
        31.23933105,
        4.33932039,
        11.94982724
      ]
    ])
  end

  defp x_wide do
    Nx.tensor([[1, 2, 3, 1], [2, 56, 2, 4]])
  end

  test "all default params" do
    embedding = TSNE.fit(x(), key: key())

    expected =
      Nx.tensor([
        [-6.426266193389893, 8.332388877868652],
        [-4.163736343383789, -2.494565963745117],
        [-31.295236587524414, -31.229860305786133],
        [-15.800895690917969, 30.764965057373047],
        [2.5463109016418457, 0.6726856231689453],
        [65.74525451660156, 27.774755477905273],
        [-75.81666564941406, 25.76173973083496],
        [-1.8086342811584473, -11.712549209594727],
        [62.6073112487793, -31.151100158691406],
        [4.412214279174805, -16.7202091217041]
      ])

    assert_all_close(embedding, expected)
  end

  test "test for wide matrix" do
    embedding = TSNE.fit(x_wide(), key: key())

    expected =
      Nx.tensor([
        [3679.796875, 0.0],
        [-3679.796875, 0.0]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default num_components" do
    embedding = TSNE.fit(x(), num_components: 3, key: key())

    expected =
      Nx.tensor([
        [-1.2834149599075317, -65.1137924194336, -93.11331939697266],
        [6.327005386352539, -6.078601360321045, -13.47922134399414],
        [-10.256635665893555, 4.116176605224609, 3.168473243713379],
        [9.371475219726562, 7.126360893249512, -4.854560852050781],
        [17.84250259399414, 72.40726470947266, 102.68474578857422],
        [-1.725927472114563, -0.2951417863368988, 6.848171234130859],
        [1.584486961364746, -2.4704296588897705, -1.3732502460479736],
        [-6.182180881500244, -13.586234092712402, -5.3855509757995605],
        [-15.67674732208252, 4.1522440910339355, 14.045616149902344],
        [-0.0035001635551452637, -0.25596773624420166, -8.5401611328125]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default perplexity" do
    embedding = TSNE.fit(x(), perplexity: 5, key: key())

    expected =
      Nx.tensor([
        [-47.81830596923828, 123.67109680175781],
        [1.1313371658325195, 12.589241027832031],
        [171.11619567871094, -143.08013916015625],
        [174.58798217773438, 18.175519943237305],
        [-12.315837860107422, 16.606094360351562],
        [-171.61473083496094, -7.717001914978027],
        [-145.23251342773438, 91.37753295898438],
        [18.64778709411621, -117.26519775390625],
        [-28.962860107421875, 24.56144142150879],
        [40.460567474365234, -18.91954231262207]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default learning_rate" do
    embedding = TSNE.fit(x(), learning_rate: 100, key: key())

    expected =
      Nx.tensor([
        [20.1014347076416, -8.380684852600098],
        [-0.44876933097839355, -0.0935119092464447],
        [-0.706710159778595, 5.1501970291137695],
        [-3.5239882469177246, -2.9893593788146973],
        [-0.4266725778579712, -2.9560775756835938],
        [-0.4950576424598694, 8.39889907836914],
        [5.351792335510254, -7.0025529861450195],
        [-7.3377509117126465, 3.231973171234131],
        [-8.974485397338867, 0.6503140926361084],
        [-3.5397887229919434, 3.9906702041625977]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default max_iter" do
    embedding = TSNE.fit(x(), num_iters: 333, key: key())

    expected =
      Nx.tensor([
        [-18.915882110595703, -2.7932233810424805],
        [-71.29559326171875, -81.77560424804688],
        [14.130539894104004, -157.9973907470703],
        [-10.224050521850586, -4.1823410987854],
        [-18.021028518676758, -9.254148483276367],
        [-26.070053100585938, -1.6795881986618042],
        [-13.233553886413574, 18.421363830566406],
        [31.8947811126709, 104.57353973388672],
        [129.38308715820312, 127.35003662109375],
        [-17.648744583129883, 7.335616111755371]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default init" do
    embedding = TSNE.fit(x(), init: :random, key: key())

    expected =
      Nx.tensor([
        [-156.66343688964844, -34.973445892333984],
        [78.5311050415039, -101.2839126586914],
        [75.17900848388672, 34.4267692565918],
        [-43.72159194946289, -102.33932495117188],
        [153.0662078857422, 101.59364318847656],
        [84.43276977539062, 0.04915308952331543],
        [-44.736968994140625, -35.98069381713867],
        [-79.83869171142578, 370.6204528808594],
        [-32.189876556396484, -120.83247375488281],
        [-34.056640625, -111.28446960449219]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default metric" do
    embedding = TSNE.fit(x(), key: key(), metric: :chebyshev)

    expected =
      Nx.tensor([
        [2.604278087615967, -100.68524932861328],
        [5.846366882324219, -53.27583312988281],
        [8.562166213989258, -38.018890380859375],
        [18.852039337158203, 13.029205322265625],
        [19.86124038696289, 22.388168334960938],
        [-33.23206329345703, 18.488771438598633],
        [-13.544496536254883, 53.925811767578125],
        [-1.1907639503479004, 42.48714065551758],
        [-5.692774772644043, 22.050697326660156],
        [-2.0605876445770264, 19.605968475341797]
      ])

    assert_all_close(embedding, expected)
  end

  test "non-default exaggeration" do
    embedding = TSNE.fit(x(), key: key(), exaggeration: 4.5)

    expected =
      Nx.tensor([
        [-20.31999397277832, -16.71266746520996],
        [1.3730521202087402, -8.214937210083008],
        [-9.726605415344238, 5.619704723358154],
        [17.57297706604004, 20.00632095336914],
        [4.100193023681641, -14.283998489379883],
        [-35.61519241333008, 39.55061340332031],
        [-9.747889518737793, -1.3829679489135742],
        [4.221410274505615, -10.61603832244873],
        [22.889684677124023, 52.71660232543945],
        [25.252023696899414, -66.6830825805664]
      ])

    assert_all_close(embedding, expected)
  end
end
